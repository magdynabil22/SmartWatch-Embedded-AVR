
finalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000288  00800060  00001746  000017da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008002e8  008002e8  00001a62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003718  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e13  00000000  00000000  00005430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b4c  00000000  00000000  00006243  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00007d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000523  00000000  00000000  000081f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018c4  00000000  00000000  00008717  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009fdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 03 	call	0x788	; 0x788 <main>
      8a:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
 */ 
#include "accelerometer.h"

void ADC_Init() {
	// Set PA2, PA3, and PA4 as input
	DDRA &= ~((1 << PA2) | (1 << PA3) | (1 << PA4));
      92:	8a b3       	in	r24, 0x1a	; 26
      94:	83 7e       	andi	r24, 0xE3	; 227
      96:	8a bb       	out	0x1a, r24	; 26

	// Enable ADC, set ADC prescaler to 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
      98:	86 b1       	in	r24, 0x06	; 6
      9a:	87 68       	ori	r24, 0x87	; 135
      9c:	86 b9       	out	0x06, r24	; 6
      9e:	08 95       	ret

000000a0 <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Set ADC channel
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
      a0:	97 b1       	in	r25, 0x07	; 7
      a2:	87 70       	andi	r24, 0x07	; 7
      a4:	98 7f       	andi	r25, 0xF8	; 248
      a6:	89 2b       	or	r24, r25
      a8:	87 b9       	out	0x07, r24	; 7

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
      aa:	36 9a       	sbi	0x06, 6	; 6

	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
      ac:	36 99       	sbic	0x06, 6	; 6
      ae:	fe cf       	rjmp	.-4      	; 0xac <ADC_Read+0xc>

	// Return ADC value
	return ADC;
      b0:	84 b1       	in	r24, 0x04	; 4
      b2:	95 b1       	in	r25, 0x05	; 5
}
      b4:	08 95       	ret

000000b6 <DisplayCoordinates>:

void DisplayCoordinates(int16_t x, int16_t y) {
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	8c 01       	movw	r16, r24
      c0:	eb 01       	movw	r28, r22
	LCD_clr();
      c2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
	LCD_setCursor(0,0);
      c6:	60 e0       	ldi	r22, 0x00	; 0
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("X: ");
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
	LCD_wriInt(x,0,2);
      d6:	42 e0       	ldi	r20, 0x02	; 2
      d8:	50 e0       	ldi	r21, 0x00	; 0
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	c8 01       	movw	r24, r16
      e0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
	LCD_setCursor(0,8);
      e4:	68 e0       	ldi	r22, 0x08	; 8
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr(" Y:");
      ec:	84 e6       	ldi	r24, 0x64	; 100
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
	LCD_wriInt(y,0,11);
      f4:	4b e0       	ldi	r20, 0x0B	; 11
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	ce 01       	movw	r24, r28
      fe:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	1f 91       	pop	r17
     108:	0f 91       	pop	r16
     10a:	08 95       	ret

0000010c <Buzzer_Init>:
 * Created: 05/09/2023 06:34:16 ุต
 *  Author: user
 */ 
#include "Buzzer.h"
void Buzzer_Init(void){
	DDRD|=(1<<0);
     10c:	88 9a       	sbi	0x11, 0	; 17
     10e:	08 95       	ret

00000110 <buzzer>:
	
}
void buzzer (void){
     110:	83 e0       	ldi	r24, 0x03	; 3
     112:	90 e0       	ldi	r25, 0x00	; 0
	int i;
	for(i=0;i<3;i++){
		PORTD |=(1<<0);
     114:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	2f e9       	ldi	r18, 0x9F	; 159
     118:	36 e8       	ldi	r19, 0x86	; 134
     11a:	41 e0       	ldi	r20, 0x01	; 1
     11c:	21 50       	subi	r18, 0x01	; 1
     11e:	30 40       	sbci	r19, 0x00	; 0
     120:	40 40       	sbci	r20, 0x00	; 0
     122:	e1 f7       	brne	.-8      	; 0x11c <buzzer+0xc>
     124:	00 c0       	rjmp	.+0      	; 0x126 <buzzer+0x16>
     126:	00 00       	nop
		_delay_ms(500);
		PORTD &=~(1<<0);
     128:	90 98       	cbi	0x12, 0	; 18
     12a:	ef e4       	ldi	r30, 0x4F	; 79
     12c:	f3 ec       	ldi	r31, 0xC3	; 195
     12e:	31 97       	sbiw	r30, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <buzzer+0x1e>
     132:	00 c0       	rjmp	.+0      	; 0x134 <buzzer+0x24>
     134:	00 00       	nop
     136:	01 97       	sbiw	r24, 0x01	; 1
	DDRD|=(1<<0);
	
}
void buzzer (void){
	int i;
	for(i=0;i<3;i++){
     138:	69 f7       	brne	.-38     	; 0x114 <buzzer+0x4>
		PORTD |=(1<<0);
		_delay_ms(500);
		PORTD &=~(1<<0);
		_delay_ms(200);
	}
     13a:	08 95       	ret

0000013c <DCmotor_Init>:
 *  Author: user
 */ 
#include "DCmotor.h"
#include "KEYPAD.h"
void DCmotor_Init(void){
	TCNT2=0;
     13c:	14 bc       	out	0x24, r1	; 36
	// Configure Timer2 for PWM generation
	TCCR2 |= (1 << WGM20) | (1 << WGM21);  // Fast PWM mode
     13e:	85 b5       	in	r24, 0x25	; 37
     140:	88 64       	ori	r24, 0x48	; 72
     142:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << COM21);                 // Set at non-inverting mode
     144:	85 b5       	in	r24, 0x25	; 37
     146:	80 62       	ori	r24, 0x20	; 32
     148:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~((1<<4)|(1<<2));
     14a:	85 b5       	in	r24, 0x25	; 37
     14c:	8b 7e       	andi	r24, 0xEB	; 235
     14e:	85 bd       	out	0x25, r24	; 37
	DDRD |= (1<<7); //making oc2 output 
     150:	8f 9a       	sbi	0x11, 7	; 17
	DDRD &= ~(1<<3); //push button for selecting the speed of fan
     152:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<3); //enabling pull up resistor
     154:	93 9a       	sbi	0x12, 3	; 18
	
	//enabling the EN pin of dc motor
	DDRA |= (1<<7);
     156:	d7 9a       	sbi	0x1a, 7	; 26
	PORTA |= (1<<7);
     158:	df 9a       	sbi	0x1b, 7	; 27
     15a:	08 95       	ret

0000015c <Fan_ON>:
}

count=0;
void Fan_ON (void){
	//enabling the EN pin of dc motor and disablng servo
	DDRA |= (1<<7)|(1<<6);
     15c:	8a b3       	in	r24, 0x1a	; 26
     15e:	80 6c       	ori	r24, 0xC0	; 192
     160:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<7);
     162:	df 9a       	sbi	0x1b, 7	; 27
	
	TCCR2 |= (1 << CS20) | (1 << CS21);    // Prescaler 64 (to start timer)
     164:	85 b5       	in	r24, 0x25	; 37
     166:	83 60       	ori	r24, 0x03	; 3
     168:	85 bd       	out	0x25, r24	; 37
	if(!(PIND&0x08)){
     16a:	83 99       	sbic	0x10, 3	; 16
     16c:	37 c0       	rjmp	.+110    	; 0x1dc <Fan_ON+0x80>
			while(!(PIND&0x08)); //wait until button is unpressed
     16e:	83 9b       	sbis	0x10, 3	; 16
     170:	fe cf       	rjmp	.-4      	; 0x16e <Fan_ON+0x12>
			LCD_clrScnd();
     172:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
			LCD_setCursor(1,0);
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
			count++;
     17e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <__data_end>
     182:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <__data_end+0x1>
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <__data_end+0x1>
     18c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <__data_end>
			switch(count){
     190:	82 30       	cpi	r24, 0x02	; 2
     192:	91 05       	cpc	r25, r1
     194:	61 f0       	breq	.+24     	; 0x1ae <Fan_ON+0x52>
     196:	83 30       	cpi	r24, 0x03	; 3
     198:	91 05       	cpc	r25, r1
     19a:	81 f0       	breq	.+32     	; 0x1bc <Fan_ON+0x60>
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	a9 f4       	brne	.+42     	; 0x1ca <Fan_ON+0x6e>
				case 1: 
					LCD_writeStr("first speed");
     1a0:	88 e6       	ldi	r24, 0x68	; 104
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
					OCR2=64;
     1a8:	80 e4       	ldi	r24, 0x40	; 64
     1aa:	83 bd       	out	0x23, r24	; 35
					break;
     1ac:	08 95       	ret
				case 2:
					LCD_writeStr("second speed");
     1ae:	84 e7       	ldi	r24, 0x74	; 116
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
					OCR2 = 128;
     1b6:	80 e8       	ldi	r24, 0x80	; 128
     1b8:	83 bd       	out	0x23, r24	; 35
					break;
     1ba:	08 95       	ret
				case 3:
					LCD_writeStr("third speed");
     1bc:	81 e8       	ldi	r24, 0x81	; 129
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
					OCR2 = 255;
     1c4:	8f ef       	ldi	r24, 0xFF	; 255
     1c6:	83 bd       	out	0x23, r24	; 35
					break;
     1c8:	08 95       	ret
				default:
					LCD_writeStr("No speed");
     1ca:	8d e8       	ldi	r24, 0x8D	; 141
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
					OCR2=0;
     1d2:	13 bc       	out	0x23, r1	; 35
					count=0;
     1d4:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <__data_end+0x1>
     1d8:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <__data_end>
     1dc:	08 95       	ret

000001de <setupTimer>:


void setupTimer()
{
	// Set Timer1 to CTC mode with prescaler = 64
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
     1de:	8e b5       	in	r24, 0x2e	; 46
     1e0:	8b 60       	ori	r24, 0x0B	; 11
     1e2:	8e bd       	out	0x2e, r24	; 46

	// Set compare match value for 1Hz frequency
	OCR1A = (F_CPU / (PRESCALER * 1)) - 1;
     1e4:	88 e0       	ldi	r24, 0x08	; 8
     1e6:	9d e3       	ldi	r25, 0x3D	; 61
     1e8:	9b bd       	out	0x2b, r25	; 43
     1ea:	8a bd       	out	0x2a, r24	; 42

	// Enable Timer1 compare interrupt
	TIMSK |= (1 << OCIE1A);
     1ec:	89 b7       	in	r24, 0x39	; 57
     1ee:	80 61       	ori	r24, 0x10	; 16
     1f0:	89 bf       	out	0x39, r24	; 57

	// Enable global interrupts
	sei();
     1f2:	78 94       	sei
     1f4:	08 95       	ret

000001f6 <setupSensor>:
}

void setupSensor()
{
	// Configure sensor pin as input
	DDRD &= ~(1 << SENSOR_PIN);
     1f6:	8a 98       	cbi	0x11, 2	; 17

	// Enable internal pull-up resistor for sensor pin
	PORTD |= (1 << SENSOR_PIN);
     1f8:	92 9a       	sbi	0x12, 2	; 18

	// Enable external interrupt INT0
	GICR |= (1 << INT0);
     1fa:	8b b7       	in	r24, 0x3b	; 59
     1fc:	80 64       	ori	r24, 0x40	; 64
     1fe:	8b bf       	out	0x3b, r24	; 59

	// Set interrupt on falling edge
	MCUCR |= (1 << ISC01);
     200:	85 b7       	in	r24, 0x35	; 53
     202:	82 60       	ori	r24, 0x02	; 2
     204:	85 bf       	out	0x35, r24	; 53
     206:	08 95       	ret

00000208 <calculateBPM>:
}

void calculateBPM(void)
{
	  // Calculate BPM using pulse count and time interval
	  bpm = (pulseCount * 60) / MEASURE_INTERVAL;
     208:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <pulseCount>
     20c:	2c e3       	ldi	r18, 0x3C	; 60
     20e:	82 9f       	mul	r24, r18
     210:	c0 01       	movw	r24, r0
     212:	11 24       	eor	r1, r1
     214:	95 95       	asr	r25
     216:	87 95       	ror	r24
     218:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <bpm>

	  // Reset pulse count
	  pulseCount = 0;
     21c:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <pulseCount>
     220:	08 95       	ret

00000222 <IR_Init>:
 * Created: 05/09/2023 04:44:27 ุต
 *  Author: user
 */ 
#include "IR.h"
void IR_Init(void){
	DDRD &=~ (1<<1);
     222:	89 98       	cbi	0x11, 1	; 17
	PORTD |= (1<<1);
     224:	91 9a       	sbi	0x12, 1	; 18
     226:	08 95       	ret

00000228 <IR_check>:
}
bool IR_check(void){
	return (PIND&0x02);
     228:	80 b3       	in	r24, 0x10	; 16
     22a:	86 95       	lsr	r24
     22c:	81 70       	andi	r24, 0x01	; 1
     22e:	08 95       	ret

00000230 <KeyPadInit>:
#include "KEYPAD.h"
void KeyPadInit(){
	KEYPAD_DDR =0xF0;
     230:	80 ef       	ldi	r24, 0xF0	; 240
     232:	84 bb       	out	0x14, r24	; 20
	KEYPAD_PORT = 0x00;
     234:	15 ba       	out	0x15, r1	; 21
     236:	08 95       	ret

00000238 <getChar>:
}

char getChar(){

		KEYPAD_PORT=0x10;
     238:	80 e1       	ldi	r24, 0x10	; 16
     23a:	85 bb       	out	0x15, r24	; 21
		if(KEYPAD_PIN&0x01){while(KEYPAD_PIN&0x01) {} return'7'; }
     23c:	98 9b       	sbis	0x13, 0	; 19
     23e:	04 c0       	rjmp	.+8      	; 0x248 <getChar+0x10>
     240:	98 99       	sbic	0x13, 0	; 19
     242:	fe cf       	rjmp	.-4      	; 0x240 <getChar+0x8>
     244:	87 e3       	ldi	r24, 0x37	; 55
     246:	08 95       	ret
		else if(KEYPAD_PIN&0x02){while(KEYPAD_PIN&0x02) {} return '4'; }
     248:	99 9b       	sbis	0x13, 1	; 19
     24a:	04 c0       	rjmp	.+8      	; 0x254 <getChar+0x1c>
     24c:	99 99       	sbic	0x13, 1	; 19
     24e:	fe cf       	rjmp	.-4      	; 0x24c <getChar+0x14>
     250:	84 e3       	ldi	r24, 0x34	; 52
     252:	08 95       	ret
		else if(KEYPAD_PIN&0x04){while(KEYPAD_PIN&0x04) {} return '1'; }
     254:	9a 9b       	sbis	0x13, 2	; 19
     256:	04 c0       	rjmp	.+8      	; 0x260 <getChar+0x28>
     258:	9a 99       	sbic	0x13, 2	; 19
     25a:	fe cf       	rjmp	.-4      	; 0x258 <getChar+0x20>
     25c:	81 e3       	ldi	r24, 0x31	; 49
     25e:	08 95       	ret
		else if(KEYPAD_PIN&0x08){while(KEYPAD_PIN&0x08) {} return 'c'; }
     260:	9b 9b       	sbis	0x13, 3	; 19
     262:	04 c0       	rjmp	.+8      	; 0x26c <getChar+0x34>
     264:	9b 99       	sbic	0x13, 3	; 19
     266:	fe cf       	rjmp	.-4      	; 0x264 <getChar+0x2c>
     268:	83 e6       	ldi	r24, 0x63	; 99
     26a:	08 95       	ret
     26c:	81 ee       	ldi	r24, 0xE1	; 225
     26e:	94 e0       	ldi	r25, 0x04	; 4
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <getChar+0x38>
     274:	00 c0       	rjmp	.+0      	; 0x276 <getChar+0x3e>
     276:	00 00       	nop
		_delay_ms(5);

		KEYPAD_PORT=0x20;
     278:	80 e2       	ldi	r24, 0x20	; 32
     27a:	85 bb       	out	0x15, r24	; 21
		if(KEYPAD_PIN&0x01){while(KEYPAD_PIN&0x01) {} return '8'; }
     27c:	98 9b       	sbis	0x13, 0	; 19
     27e:	04 c0       	rjmp	.+8      	; 0x288 <getChar+0x50>
     280:	98 99       	sbic	0x13, 0	; 19
     282:	fe cf       	rjmp	.-4      	; 0x280 <getChar+0x48>
     284:	88 e3       	ldi	r24, 0x38	; 56
     286:	08 95       	ret
		if(KEYPAD_PIN&0x02){while(KEYPAD_PIN&0x02) {} return '5'; }
     288:	99 9b       	sbis	0x13, 1	; 19
     28a:	04 c0       	rjmp	.+8      	; 0x294 <getChar+0x5c>
     28c:	99 99       	sbic	0x13, 1	; 19
     28e:	fe cf       	rjmp	.-4      	; 0x28c <getChar+0x54>
     290:	85 e3       	ldi	r24, 0x35	; 53
     292:	08 95       	ret
		if(KEYPAD_PIN&0x04){while(KEYPAD_PIN&0x04) {} return '2'; }
     294:	9a 9b       	sbis	0x13, 2	; 19
     296:	04 c0       	rjmp	.+8      	; 0x2a0 <getChar+0x68>
     298:	9a 99       	sbic	0x13, 2	; 19
     29a:	fe cf       	rjmp	.-4      	; 0x298 <getChar+0x60>
     29c:	82 e3       	ldi	r24, 0x32	; 50
     29e:	08 95       	ret
		if(KEYPAD_PIN&0x08){while(KEYPAD_PIN&0x08) {} return '0'; }
     2a0:	9b 9b       	sbis	0x13, 3	; 19
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <getChar+0x74>
     2a4:	9b 99       	sbic	0x13, 3	; 19
     2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <getChar+0x6c>
     2a8:	80 e3       	ldi	r24, 0x30	; 48
     2aa:	08 95       	ret
     2ac:	81 ee       	ldi	r24, 0xE1	; 225
     2ae:	94 e0       	ldi	r25, 0x04	; 4
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <getChar+0x78>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <getChar+0x7e>
     2b6:	00 00       	nop
		_delay_ms(5);

		KEYPAD_PORT=0x40;
     2b8:	80 e4       	ldi	r24, 0x40	; 64
     2ba:	85 bb       	out	0x15, r24	; 21
		if(KEYPAD_PIN&0x01){while(KEYPAD_PIN&0x01) {} return '9'; }
     2bc:	98 9b       	sbis	0x13, 0	; 19
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <getChar+0x90>
     2c0:	98 99       	sbic	0x13, 0	; 19
     2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <getChar+0x88>
     2c4:	89 e3       	ldi	r24, 0x39	; 57
     2c6:	08 95       	ret
		if(KEYPAD_PIN&0x02){while(KEYPAD_PIN&0x02) {} return '6'; }
     2c8:	99 9b       	sbis	0x13, 1	; 19
     2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <getChar+0x9c>
     2cc:	99 99       	sbic	0x13, 1	; 19
     2ce:	fe cf       	rjmp	.-4      	; 0x2cc <getChar+0x94>
     2d0:	86 e3       	ldi	r24, 0x36	; 54
     2d2:	08 95       	ret
		if(KEYPAD_PIN&0x04){while(KEYPAD_PIN&0x04) {} return '3'; }
     2d4:	9a 9b       	sbis	0x13, 2	; 19
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <getChar+0xa8>
     2d8:	9a 99       	sbic	0x13, 2	; 19
     2da:	fe cf       	rjmp	.-4      	; 0x2d8 <getChar+0xa0>
     2dc:	83 e3       	ldi	r24, 0x33	; 51
     2de:	08 95       	ret
		if(KEYPAD_PIN&0x08){while(KEYPAD_PIN&0x08) {} return '='; }
     2e0:	9b 9b       	sbis	0x13, 3	; 19
     2e2:	04 c0       	rjmp	.+8      	; 0x2ec <getChar+0xb4>
     2e4:	9b 99       	sbic	0x13, 3	; 19
     2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <getChar+0xac>
     2e8:	8d e3       	ldi	r24, 0x3D	; 61
     2ea:	08 95       	ret
     2ec:	81 ee       	ldi	r24, 0xE1	; 225
     2ee:	94 e0       	ldi	r25, 0x04	; 4
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <getChar+0xb8>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <getChar+0xbe>
     2f6:	00 00       	nop
		_delay_ms(5);

		KEYPAD_PORT=0x80;
     2f8:	80 e8       	ldi	r24, 0x80	; 128
     2fa:	85 bb       	out	0x15, r24	; 21
		if(KEYPAD_PIN&0x01){while(KEYPAD_PIN&0x01) {} return'/'; }
     2fc:	98 9b       	sbis	0x13, 0	; 19
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <getChar+0xd0>
     300:	98 99       	sbic	0x13, 0	; 19
     302:	fe cf       	rjmp	.-4      	; 0x300 <getChar+0xc8>
     304:	8f e2       	ldi	r24, 0x2F	; 47
     306:	08 95       	ret
		if(KEYPAD_PIN&0x02){while(KEYPAD_PIN&0x02) {} return 'x'; }
     308:	99 9b       	sbis	0x13, 1	; 19
     30a:	04 c0       	rjmp	.+8      	; 0x314 <getChar+0xdc>
     30c:	99 99       	sbic	0x13, 1	; 19
     30e:	fe cf       	rjmp	.-4      	; 0x30c <getChar+0xd4>
     310:	88 e7       	ldi	r24, 0x78	; 120
     312:	08 95       	ret
		if(KEYPAD_PIN&0x04){while(KEYPAD_PIN&0x04) {} return '-'; }
     314:	9a 9b       	sbis	0x13, 2	; 19
     316:	04 c0       	rjmp	.+8      	; 0x320 <getChar+0xe8>
     318:	9a 99       	sbic	0x13, 2	; 19
     31a:	fe cf       	rjmp	.-4      	; 0x318 <getChar+0xe0>
     31c:	8d e2       	ldi	r24, 0x2D	; 45
     31e:	08 95       	ret
		if(KEYPAD_PIN&0x08){while(KEYPAD_PIN&0x08) {} return '+'; }
     320:	9b 9b       	sbis	0x13, 3	; 19
     322:	04 c0       	rjmp	.+8      	; 0x32c <getChar+0xf4>
     324:	9b 99       	sbic	0x13, 3	; 19
     326:	fe cf       	rjmp	.-4      	; 0x324 <getChar+0xec>
     328:	8b e2       	ldi	r24, 0x2B	; 43
     32a:	08 95       	ret
     32c:	81 ee       	ldi	r24, 0xE1	; 225
     32e:	94 e0       	ldi	r25, 0x04	; 4
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <getChar+0xf8>
     334:	00 c0       	rjmp	.+0      	; 0x336 <getChar+0xfe>
     336:	00 00       	nop
		_delay_ms(5);


return 'N';
     338:	8e e4       	ldi	r24, 0x4E	; 78

}
     33a:	08 95       	ret

0000033c <fillArr>:

uint8_t fillArr(uint8_t *a, uint8_t max) {
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	7c 01       	movw	r14, r24
     348:	8c 01       	movw	r16, r24
     34a:	06 0f       	add	r16, r22
     34c:	11 1d       	adc	r17, r1
	uint8_t count = 0;

	while ((count < max)&&IR_check()) { //if ir stops sensing you the lcd turn off
     34e:	1a c0       	rjmp	.+52     	; 0x384 <fillArr+0x48>
		char key = getChar();
     350:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
     354:	c8 2f       	mov	r28, r24
		if (key != 'N') {
     356:	8e 34       	cpi	r24, 0x4E	; 78
     358:	c1 f0       	breq	.+48     	; 0x38a <fillArr+0x4e>
			LCD_data(key);
     35a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_data>
     35e:	83 ec       	ldi	r24, 0xC3	; 195
     360:	99 e0       	ldi	r25, 0x09	; 9
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <fillArr+0x26>
     366:	00 c0       	rjmp	.+0      	; 0x368 <fillArr+0x2c>
     368:	00 00       	nop
     36a:	f7 01       	movw	r30, r14
			_delay_ms(10);
			a[count] = key;
     36c:	d7 01       	movw	r26, r14
     36e:	cd 93       	st	X+, r28
     370:	7d 01       	movw	r14, r26
     372:	83 ec       	ldi	r24, 0xC3	; 195
     374:	99 e0       	ldi	r25, 0x09	; 9
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <fillArr+0x3a>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <fillArr+0x40>
     37c:	00 00       	nop
			_delay_ms(10);

		// Check if user pressed =
		if (a[count] == '=') {
     37e:	80 81       	ld	r24, Z
     380:	8d 33       	cpi	r24, 0x3D	; 61
     382:	49 f0       	breq	.+18     	; 0x396 <fillArr+0x5a>
}

uint8_t fillArr(uint8_t *a, uint8_t max) {
	uint8_t count = 0;

	while ((count < max)&&IR_check()) { //if ir stops sensing you the lcd turn off
     384:	e0 16       	cp	r14, r16
     386:	f1 06       	cpc	r15, r17
     388:	41 f0       	breq	.+16     	; 0x39a <fillArr+0x5e>
     38a:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     38e:	89 2b       	or	r24, r25
     390:	f9 f6       	brne	.-66     	; 0x350 <fillArr+0x14>

		count++;
		}
	}

	return 1;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	03 c0       	rjmp	.+6      	; 0x39c <fillArr+0x60>
			a[count] = key;
			_delay_ms(10);

		// Check if user pressed =
		if (a[count] == '=') {
			return 0;
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	01 c0       	rjmp	.+2      	; 0x39c <fillArr+0x60>

		count++;
		}
	}

	return 1;
     39a:	81 e0       	ldi	r24, 0x01	; 1

}
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	08 95       	ret

000003a8 <checkPasscode>:

bool checkPasscode(char passcode[]) {
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <checkPasscode+0x6>
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <checkPasscode+0x8>
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
	char valid[4]="1234";
     3b4:	21 e3       	ldi	r18, 0x31	; 49
     3b6:	29 83       	std	Y+1, r18	; 0x01
     3b8:	32 e3       	ldi	r19, 0x32	; 50
     3ba:	3a 83       	std	Y+2, r19	; 0x02
     3bc:	33 e3       	ldi	r19, 0x33	; 51
     3be:	3b 83       	std	Y+3, r19	; 0x03
     3c0:	34 e3       	ldi	r19, 0x34	; 52
     3c2:	3c 83       	std	Y+4, r19	; 0x04
	bool equal=true;
	uint8_t i;
	for(i=0;i<4;i++){
		if(passcode[i]!=valid[i]) {equal=false;break;}
     3c4:	fc 01       	movw	r30, r24
     3c6:	30 81       	ld	r19, Z
     3c8:	32 13       	cpse	r19, r18
     3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <checkPasscode+0x3e>
     3cc:	31 96       	adiw	r30, 0x01	; 1
     3ce:	de 01       	movw	r26, r28
     3d0:	12 96       	adiw	r26, 0x02	; 2
     3d2:	04 96       	adiw	r24, 0x04	; 4
     3d4:	31 91       	ld	r19, Z+
     3d6:	2d 91       	ld	r18, X+
     3d8:	32 13       	cpse	r19, r18
     3da:	07 c0       	rjmp	.+14     	; 0x3ea <checkPasscode+0x42>

bool checkPasscode(char passcode[]) {
	char valid[4]="1234";
	bool equal=true;
	uint8_t i;
	for(i=0;i<4;i++){
     3dc:	e8 17       	cp	r30, r24
     3de:	f9 07       	cpc	r31, r25
     3e0:	c9 f7       	brne	.-14     	; 0x3d4 <checkPasscode+0x2c>

}

bool checkPasscode(char passcode[]) {
	char valid[4]="1234";
	bool equal=true;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <checkPasscode+0x44>
	uint8_t i;
	for(i=0;i<4;i++){
		if(passcode[i]!=valid[i]) {equal=false;break;}
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <checkPasscode+0x44>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
	}
	return equal;
}
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <LCD_data>:
#include "LCD.h"
void LCD_data(char c){
	LCD_DATA=c;             //LCD_DATA is connected to port A, //RS,RW,EN is selected to be pin4,5,6 port D
     3fa:	88 bb       	out	0x18, r24	; 24
	PORTD |= (1<<RS);		//in writing reset is enabled
     3fc:	94 9a       	sbi	0x12, 4	; 18
	PORTD &= ~(1<<RW);
     3fe:	95 98       	cbi	0x12, 5	; 18
	PORTD |= (1<<EN);
     400:	96 9a       	sbi	0x12, 6	; 18
     402:	81 ee       	ldi	r24, 0xE1	; 225
     404:	94 e0       	ldi	r25, 0x04	; 4
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
	_delay_ms(5);
	PORTD &= ~(1<<EN);
     40e:	96 98       	cbi	0x12, 6	; 18
     410:	08 95       	ret

00000412 <LCD_cmd>:
}


void LCD_cmd(uint8_t command){
	LCD_DATA =command;
     412:	88 bb       	out	0x18, r24	; 24
	PORTD &= ~(1<<RS);		//rs,rw disabled / EN is enabled then disabled
     414:	94 98       	cbi	0x12, 4	; 18
	PORTD &= ~(1<<RW);
     416:	95 98       	cbi	0x12, 5	; 18
	PORTD |= (1<<EN);
     418:	96 9a       	sbi	0x12, 6	; 18
     41a:	81 ee       	ldi	r24, 0xE1	; 225
     41c:	94 e0       	ldi	r25, 0x04	; 4
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <LCD_cmd+0xc>
     422:	00 c0       	rjmp	.+0      	; 0x424 <LCD_cmd+0x12>
     424:	00 00       	nop
	_delay_ms(5);
	PORTD &= ~(1<<EN);
     426:	96 98       	cbi	0x12, 6	; 18
     428:	08 95       	ret

0000042a <LCD_init>:
     42a:	85 ea       	ldi	r24, 0xA5	; 165
     42c:	9e e0       	ldi	r25, 0x0E	; 14
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <LCD_init+0x4>
     432:	00 c0       	rjmp	.+0      	; 0x434 <LCD_init+0xa>
     434:	00 00       	nop
}

void LCD_init(void){
	_delay_ms(15);          //needs time for tw
	DDRB = 0xff;		    //port A which is lcd data port is output
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0x70;		    //port D (4,5,6) which is lcd command port is output
     43a:	81 b3       	in	r24, 0x11	; 17
     43c:	80 67       	ori	r24, 0x70	; 112
     43e:	81 bb       	out	0x11, r24	; 17
	LCD_cmd(0x38);		    //using 2lines 8bit mode
     440:	88 e3       	ldi	r24, 0x38	; 56
     442:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     446:	81 ee       	ldi	r24, 0xE1	; 225
     448:	94 e0       	ldi	r25, 0x04	; 4
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <LCD_init+0x20>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <LCD_init+0x26>
     450:	00 00       	nop
	_delay_ms(5);
	LCD_cmd(0x01);		    //clear the lcd screen
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     458:	81 ee       	ldi	r24, 0xE1	; 225
     45a:	94 e0       	ldi	r25, 0x04	; 4
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <LCD_init+0x32>
     460:	00 c0       	rjmp	.+0      	; 0x462 <LCD_init+0x38>
     462:	00 00       	nop
	_delay_ms(5);
	LCD_cmd(0x02);			//return home
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     46a:	81 ee       	ldi	r24, 0xE1	; 225
     46c:	94 e0       	ldi	r25, 0x04	; 4
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <LCD_init+0x44>
     472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_init+0x4a>
     474:	00 00       	nop
	_delay_ms(5);
	LCD_cmd(0x06);			//cursor increment
     476:	86 e0       	ldi	r24, 0x06	; 6
     478:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     47c:	81 ee       	ldi	r24, 0xE1	; 225
     47e:	94 e0       	ldi	r25, 0x04	; 4
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <LCD_init+0x56>
     484:	00 c0       	rjmp	.+0      	; 0x486 <LCD_init+0x5c>
     486:	00 00       	nop
	_delay_ms(5);
	LCD_cmd(0x80);			//move cursor to the beginning of first line
     488:	80 e8       	ldi	r24, 0x80	; 128
     48a:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     48e:	81 ee       	ldi	r24, 0xE1	; 225
     490:	94 e0       	ldi	r25, 0x04	; 4
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <LCD_init+0x68>
     496:	00 c0       	rjmp	.+0      	; 0x498 <LCD_init+0x6e>
     498:	00 00       	nop
     49a:	08 95       	ret

0000049c <LCD_setCursor>:
	_delay_ms(5);
}

void LCD_setCursor(uint8_t x,uint8_t y){
	uint8_t adress=0;
	if(x==0)
     49c:	88 23       	and	r24, r24
     49e:	21 f0       	breq	.+8      	; 0x4a8 <LCD_setCursor+0xc>
	adress=0x80;

	else if(x==1)
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	21 f4       	brne	.+8      	; 0x4ac <LCD_setCursor+0x10>
	adress=0xC0;
     4a4:	80 ec       	ldi	r24, 0xC0	; 192
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <LCD_setCursor+0x12>
}

void LCD_setCursor(uint8_t x,uint8_t y){
	uint8_t adress=0;
	if(x==0)
	adress=0x80;
     4a8:	80 e8       	ldi	r24, 0x80	; 128
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <LCD_setCursor+0x12>
	LCD_cmd(0x80);			//move cursor to the beginning of first line
	_delay_ms(5);
}

void LCD_setCursor(uint8_t x,uint8_t y){
	uint8_t adress=0;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
	adress=0x80;

	else if(x==1)
	adress=0xC0;

	if(y<16)
     4ae:	60 31       	cpi	r22, 0x10	; 16
     4b0:	08 f4       	brcc	.+2      	; 0x4b4 <LCD_setCursor+0x18>
	adress+=y;
     4b2:	86 0f       	add	r24, r22

	LCD_cmd(adress);
     4b4:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     4b8:	08 95       	ret

000004ba <LCD_clr>:
}


void LCD_clr(void){
	LCD_cmd(0x01);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     4c0:	81 ee       	ldi	r24, 0xE1	; 225
     4c2:	94 e0       	ldi	r25, 0x04	; 4
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCD_clr+0xa>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCD_clr+0x10>
     4ca:	00 00       	nop
     4cc:	08 95       	ret

000004ce <LCD_clrScnd>:
	_delay_ms(5);
}

void LCD_clrScnd(void){
     4ce:	cf 93       	push	r28
	LCD_cmd(0xC0);
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     4d6:	89 ef       	ldi	r24, 0xF9	; 249
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <LCD_clrScnd+0xc>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCD_clrScnd+0x12>
     4e0:	00 00       	nop
     4e2:	c0 e1       	ldi	r28, 0x10	; 16
	_delay_ms(1);
	uint8_t i;
	for(i=0xC0;i<=0xCF;i++){
		LCD_data(' ');
     4e4:	80 e2       	ldi	r24, 0x20	; 32
     4e6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_data>
     4ea:	c1 50       	subi	r28, 0x01	; 1

void LCD_clrScnd(void){
	LCD_cmd(0xC0);
	_delay_ms(1);
	uint8_t i;
	for(i=0xC0;i<=0xCF;i++){
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <LCD_clrScnd+0x16>
		LCD_data(' ');
	}
}
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <LCD_clrfirst>:

void LCD_clrfirst(void){
     4f2:	cf 93       	push	r28
	LCD_cmd(0x80);
     4f4:	80 e8       	ldi	r24, 0x80	; 128
     4f6:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     4fa:	89 ef       	ldi	r24, 0xF9	; 249
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <LCD_clrfirst+0xc>
     502:	00 c0       	rjmp	.+0      	; 0x504 <LCD_clrfirst+0x12>
     504:	00 00       	nop
     506:	c0 e1       	ldi	r28, 0x10	; 16
	_delay_ms(1);
	uint8_t i;
	for(i=0xC0;i<=0xCF;i++){
		LCD_data(' ');
     508:	80 e2       	ldi	r24, 0x20	; 32
     50a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_data>
     50e:	c1 50       	subi	r28, 0x01	; 1

void LCD_clrfirst(void){
	LCD_cmd(0x80);
	_delay_ms(1);
	uint8_t i;
	for(i=0xC0;i<=0xCF;i++){
     510:	d9 f7       	brne	.-10     	; 0x508 <LCD_clrfirst+0x16>
		LCD_data(' ');
	}
}
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <LCD_writeStr>:

void LCD_writeStr(char *a){
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
	// Iterate over each character in the string
	while (*a) {
     51c:	88 81       	ld	r24, Y
     51e:	88 23       	and	r24, r24
     520:	61 f0       	breq	.+24     	; 0x53a <LCD_writeStr+0x24>
     522:	21 96       	adiw	r28, 0x01	; 1
		LCD_data(*a);
     524:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_data>
     528:	89 ef       	ldi	r24, 0xF9	; 249
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <LCD_writeStr+0x16>
     530:	00 c0       	rjmp	.+0      	; 0x532 <LCD_writeStr+0x1c>
     532:	00 00       	nop
	}
}

void LCD_writeStr(char *a){
	// Iterate over each character in the string
	while (*a) {
     534:	89 91       	ld	r24, Y+
     536:	81 11       	cpse	r24, r1
     538:	f5 cf       	rjmp	.-22     	; 0x524 <LCD_writeStr+0xe>
		LCD_data(*a);
		_delay_ms(1);
		a++;
	}
}
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <LCD_Options>:


void LCD_Options(void){
	LCD_clr();
     540:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
     544:	8d ee       	ldi	r24, 0xED	; 237
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_Options+0x8>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_Options+0xe>
     54e:	00 00       	nop
	_delay_ms(3);
	LCD_setCursor(0,0);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
     558:	83 ef       	ldi	r24, 0xF3	; 243
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <LCD_Options+0x1c>
     560:	00 c0       	rjmp	.+0      	; 0x562 <LCD_Options+0x22>
     562:	00 00       	nop
	_delay_ms(2);
	LCD_writeStr("Choose Mode: ");
     564:	86 e9       	ldi	r24, 0x96	; 150
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
	LCD_setCursor(1,0);
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("1) Temperature ");
     574:	84 ea       	ldi	r24, 0xA4	; 164
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     57c:	9f e9       	ldi	r25, 0x9F	; 159
     57e:	26 e8       	ldi	r18, 0x86	; 134
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	91 50       	subi	r25, 0x01	; 1
     584:	20 40       	sbci	r18, 0x00	; 0
     586:	80 40       	sbci	r24, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <LCD_Options+0x42>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <LCD_Options+0x4c>
     58c:	00 00       	nop
	_delay_ms(500);
	LCD_clrScnd();
     58e:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
     592:	8f e4       	ldi	r24, 0x4F	; 79
     594:	93 ec       	ldi	r25, 0xC3	; 195
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <LCD_Options+0x56>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <LCD_Options+0x5c>
     59c:	00 00       	nop
	_delay_ms(200);
	LCD_setCursor(1,0);
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("2)Heartbeat Rate");
     5a6:	84 eb       	ldi	r24, 0xB4	; 180
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     5ae:	9f e9       	ldi	r25, 0x9F	; 159
     5b0:	26 e8       	ldi	r18, 0x86	; 134
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	91 50       	subi	r25, 0x01	; 1
     5b6:	20 40       	sbci	r18, 0x00	; 0
     5b8:	80 40       	sbci	r24, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <LCD_Options+0x74>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCD_Options+0x7e>
     5be:	00 00       	nop
	_delay_ms(500);
	LCD_clrScnd();
     5c0:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
     5c4:	8f e4       	ldi	r24, 0x4F	; 79
     5c6:	93 ec       	ldi	r25, 0xC3	; 195
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_Options+0x88>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_Options+0x8e>
     5ce:	00 00       	nop
	_delay_ms(200);
	LCD_setCursor(1,0);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("3) Medication ");
     5d8:	85 ec       	ldi	r24, 0xC5	; 197
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     5e0:	9f e9       	ldi	r25, 0x9F	; 159
     5e2:	26 e8       	ldi	r18, 0x86	; 134
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	91 50       	subi	r25, 0x01	; 1
     5e8:	20 40       	sbci	r18, 0x00	; 0
     5ea:	80 40       	sbci	r24, 0x00	; 0
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <LCD_Options+0xa6>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <LCD_Options+0xb0>
     5f0:	00 00       	nop
	_delay_ms(500);
	LCD_clrScnd();
     5f2:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
     5f6:	8f e4       	ldi	r24, 0x4F	; 79
     5f8:	93 ec       	ldi	r25, 0xC3	; 195
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <LCD_Options+0xba>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <LCD_Options+0xc0>
     600:	00 00       	nop
	_delay_ms(200);
	LCD_setCursor(1,0);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("4) Distance ");
     60a:	84 ed       	ldi	r24, 0xD4	; 212
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     612:	9f e9       	ldi	r25, 0x9F	; 159
     614:	26 e8       	ldi	r18, 0x86	; 134
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	91 50       	subi	r25, 0x01	; 1
     61a:	20 40       	sbci	r18, 0x00	; 0
     61c:	80 40       	sbci	r24, 0x00	; 0
     61e:	e1 f7       	brne	.-8      	; 0x618 <LCD_Options+0xd8>
     620:	00 c0       	rjmp	.+0      	; 0x622 <LCD_Options+0xe2>
     622:	00 00       	nop
	_delay_ms(500);
	LCD_clrScnd();
     624:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
     628:	8f e4       	ldi	r24, 0x4F	; 79
     62a:	93 ec       	ldi	r25, 0xC3	; 195
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <LCD_Options+0xec>
     630:	00 c0       	rjmp	.+0      	; 0x632 <LCD_Options+0xf2>
     632:	00 00       	nop
	_delay_ms(200);
	LCD_setCursor(1,0);
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("5) Stop Watch ");
     63c:	81 ee       	ldi	r24, 0xE1	; 225
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     644:	9f e9       	ldi	r25, 0x9F	; 159
     646:	26 e8       	ldi	r18, 0x86	; 134
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	91 50       	subi	r25, 0x01	; 1
     64c:	20 40       	sbci	r18, 0x00	; 0
     64e:	80 40       	sbci	r24, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <LCD_Options+0x10a>
     652:	00 c0       	rjmp	.+0      	; 0x654 <LCD_Options+0x114>
     654:	00 00       	nop
	_delay_ms(500);
	LCD_clrScnd();
     656:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
     65a:	8f e4       	ldi	r24, 0x4F	; 79
     65c:	93 ec       	ldi	r25, 0xC3	; 195
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <LCD_Options+0x11e>
     662:	00 c0       	rjmp	.+0      	; 0x664 <LCD_Options+0x124>
     664:	00 00       	nop
	_delay_ms(200);
	LCD_setCursor(1,0);
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("6) Sleep Monitoring ");
     66e:	80 ef       	ldi	r24, 0xF0	; 240
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     676:	9f e9       	ldi	r25, 0x9F	; 159
     678:	26 e8       	ldi	r18, 0x86	; 134
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	91 50       	subi	r25, 0x01	; 1
     67e:	20 40       	sbci	r18, 0x00	; 0
     680:	80 40       	sbci	r24, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <LCD_Options+0x13c>
     684:	00 c0       	rjmp	.+0      	; 0x686 <LCD_Options+0x146>
     686:	00 00       	nop
	_delay_ms(500);
	LCD_clrScnd();
     688:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
     68c:	8f e4       	ldi	r24, 0x4F	; 79
     68e:	93 ec       	ldi	r25, 0xC3	; 195
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <LCD_Options+0x150>
     694:	00 c0       	rjmp	.+0      	; 0x696 <LCD_Options+0x156>
     696:	00 00       	nop
	_delay_ms(200);
	LCD_setCursor(1,0);
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("7) Retry ");
     6a0:	85 e0       	ldi	r24, 0x05	; 5
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     6a8:	9f e9       	ldi	r25, 0x9F	; 159
     6aa:	26 e8       	ldi	r18, 0x86	; 134
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	91 50       	subi	r25, 0x01	; 1
     6b0:	20 40       	sbci	r18, 0x00	; 0
     6b2:	80 40       	sbci	r24, 0x00	; 0
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <LCD_Options+0x16e>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <LCD_Options+0x178>
     6b8:	00 00       	nop
	_delay_ms(500);
	LCD_clrScnd();
     6ba:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
     6be:	8f e4       	ldi	r24, 0x4F	; 79
     6c0:	93 ec       	ldi	r25, 0xC3	; 195
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <LCD_Options+0x182>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <LCD_Options+0x188>
     6c8:	00 00       	nop
	_delay_ms(200);
	LCD_setCursor(1,0);
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
     6d2:	08 95       	ret

000006d4 <LCD_wriInt>:
}

void LCD_wriInt(int num,int x,int y)
{
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	2a 97       	sbiw	r28, 0x0a	; 10
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	16 2f       	mov	r17, r22
     6ee:	04 2f       	mov	r16, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     6f0:	4a e0       	ldi	r20, 0x0A	; 10
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__itoa_ncheck>
	char buffer[10];  // Buffer to hold the string representation of the integer
	itoa(num, buffer, 10);  // Convert the integer to a string
	LCD_setCursor(x,y);
     6fc:	60 2f       	mov	r22, r16
     6fe:	81 2f       	mov	r24, r17
     700:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr(buffer);
     704:	ce 01       	movw	r24, r28
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
}
     70c:	2a 96       	adiw	r28, 0x0a	; 10
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	08 95       	ret

00000722 <emergency>:

void emergency(void){
	LCD_clr();
     722:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
	LCD_writeStr("BPM = ");
     726:	8f e0       	ldi	r24, 0x0F	; 15
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
	LCD_wriInt(bpm,0,6);
     72e:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <bpm>
     732:	46 e0       	ldi	r20, 0x06	; 6
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
     740:	87 ea       	ldi	r24, 0xA7	; 167
     742:	91 e6       	ldi	r25, 0x61	; 97
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <emergency+0x22>
     748:	00 c0       	rjmp	.+0      	; 0x74a <emergency+0x28>
     74a:	00 00       	nop
	_delay_ms(100);
	LCD_clr();
     74c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
	LCD_setCursor(0,0);
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("BloodType: O+");
     758:	86 e1       	ldi	r24, 0x16	; 22
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
	LCD_setCursor(1,0);
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_writeStr("01279707819");
     768:	84 e2       	ldi	r24, 0x24	; 36
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
	buzzer();
     770:	0e 94 88 00 	call	0x110	; 0x110 <buzzer>
     774:	9f e5       	ldi	r25, 0x5F	; 95
     776:	2a ee       	ldi	r18, 0xEA	; 234
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	91 50       	subi	r25, 0x01	; 1
     77c:	20 40       	sbci	r18, 0x00	; 0
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	e1 f7       	brne	.-8      	; 0x77a <emergency+0x58>
     782:	00 c0       	rjmp	.+0      	; 0x784 <emergency+0x62>
     784:	00 00       	nop
     786:	08 95       	ret

00000788 <main>:
int wrongPasscode;
uint8_t pulseCount=0;
uint8_t bpm=0;
uint8_t danger=0;  //if 10 times heat beat sensor gave critical reading then interrupt all programs 

int main(){
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	62 97       	sbiw	r28, 0x12	; 18
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
	//-------------Initializations-----------------------
	setupTimer();
     79c:	0e 94 ef 00 	call	0x1de	; 0x1de <setupTimer>
	setupSensor();
     7a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setupSensor>
	ADC_Init();
     7a4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	stopWatch_Init();
     7a8:	0e 94 a2 08 	call	0x1144	; 0x1144 <stopWatch_Init>
	DCmotor_Init();
     7ac:	0e 94 9e 00 	call	0x13c	; 0x13c <DCmotor_Init>
	IR_Init();
     7b0:	0e 94 11 01 	call	0x222	; 0x222 <IR_Init>
	Buzzer_Init();
     7b4:	0e 94 86 00 	call	0x10c	; 0x10c <Buzzer_Init>
	Temperature_Init();
     7b8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <Temperature_Init>
	LCD_init();
     7bc:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_init>
     7c0:	87 ee       	ldi	r24, 0xE7	; 231
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <main+0x3c>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <main+0x42>
     7ca:	00 00       	nop
	_delay_ms(4);
	KeyPadInit();
     7cc:	0e 94 18 01 	call	0x230	; 0x230 <KeyPadInit>
     7d0:	87 ee       	ldi	r24, 0xE7	; 231
     7d2:	93 e0       	ldi	r25, 0x03	; 3
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <main+0x4c>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <main+0x52>
     7da:	00 00       	nop
						_delay_ms(100);
						LCD_clr();
						_delay_ms(3);
						while(IR_check()){
							LCD_setCursor(0,0);
							OCR2 = 700; //makes servo angle=0 degree
     7dc:	0f 2e       	mov	r0, r31
     7de:	fc eb       	ldi	r31, 0xBC	; 188
     7e0:	2f 2e       	mov	r2, r31
     7e2:	f0 2d       	mov	r31, r0
							_delay_ms(10);
							exit=getChar();	
							if(exit=='0') break;
							while(exit=='1'){
								//if it is medication time
								OCR2 = 250; //makes servo angle=90 degrees
     7e4:	0f 2e       	mov	r0, r31
     7e6:	fa ef       	ldi	r31, 0xFA	; 250
     7e8:	3f 2e       	mov	r3, r31
     7ea:	f0 2d       	mov	r31, r0
	KeyPadInit();
	_delay_ms(4);
	
	//-----------------------program----------------------
	while(1){
		if(IR_check()){
     7ec:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     7f0:	88 23       	and	r24, r24
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <main+0x6e>
     7f4:	07 c4       	rjmp	.+2062   	; 0x1004 <__stack+0x7a5>
			wrongPasscode=0;
     7f6:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <wrongPasscode+0x1>
     7fa:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <wrongPasscode>
			LCD_cmd(0x0C);		//display on, cursor off
     7fe:	8c e0       	ldi	r24, 0x0C	; 12
     800:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
     804:	87 ee       	ldi	r24, 0xE7	; 231
     806:	93 e0       	ldi	r25, 0x03	; 3
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <main+0x80>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <main+0x86>
     80e:	00 00       	nop
			_delay_ms(4);
			LCD_setCursor(0,0);
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
			LCD_writeStr("Hello There! ");
     818:	80 e3       	ldi	r24, 0x30	; 48
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     820:	9f ed       	ldi	r25, 0xDF	; 223
     822:	22 e2       	ldi	r18, 0x22	; 34
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	91 50       	subi	r25, 0x01	; 1
     828:	20 40       	sbci	r18, 0x00	; 0
     82a:	80 40       	sbci	r24, 0x00	; 0
     82c:	e1 f7       	brne	.-8      	; 0x826 <main+0x9e>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <main+0xa8>
     830:	00 00       	nop
			_delay_ms(700);
			
			char passcode[5];
			bool isValid = false;
			
			while(IR_check()){
     832:	72 c0       	rjmp	.+228    	; 0x918 <__stack+0xb9>
				
				LCD_clr();
     834:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
     838:	83 ef       	ldi	r24, 0xF3	; 243
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <main+0xb4>
     840:	00 c0       	rjmp	.+0      	; 0x842 <main+0xba>
     842:	00 00       	nop
				_delay_ms(2);
				LCD_writeStr("Enter PassCode!");
     844:	8e e3       	ldi	r24, 0x3E	; 62
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
				
				LCD_setCursor(1,0);
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
     854:	83 ec       	ldi	r24, 0xC3	; 195
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <main+0xd0>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <main+0xd6>
     85e:	00 00       	nop
				_delay_ms(10);
				
				// Get the four digits passcode
				uint8_t filled = fillArr((uint8_t*)passcode, 4);
     860:	64 e0       	ldi	r22, 0x04	; 4
     862:	ce 01       	movw	r24, r28
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	0e 94 9e 01 	call	0x33c	; 0x33c <fillArr>

				if (filled) {
     86a:	88 23       	and	r24, r24
     86c:	59 f1       	breq	.+86     	; 0x8c4 <__stack+0x65>
					isValid = checkPasscode(passcode);
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <checkPasscode>

					if (isValid) {
     876:	88 23       	and	r24, r24
     878:	71 f0       	breq	.+28     	; 0x896 <__stack+0x37>
						LCD_writeStr("  Correct");
     87a:	8e e4       	ldi	r24, 0x4E	; 78
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     882:	9f e3       	ldi	r25, 0x3F	; 63
     884:	2d e0       	ldi	r18, 0x0D	; 13
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	91 50       	subi	r25, 0x01	; 1
     88a:	20 40       	sbci	r18, 0x00	; 0
     88c:	80 40       	sbci	r24, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <__stack+0x29>
     890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
     892:	00 00       	nop
     894:	45 c0       	rjmp	.+138    	; 0x920 <__stack+0xc1>
						_delay_ms(1000);
						break;
					}
					else {
						LCD_writeStr("  Try Again");
     896:	88 e5       	ldi	r24, 0x58	; 88
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     89e:	9f e3       	ldi	r25, 0x3F	; 63
     8a0:	2d e0       	ldi	r18, 0x0D	; 13
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	91 50       	subi	r25, 0x01	; 1
     8a6:	20 40       	sbci	r18, 0x00	; 0
     8a8:	80 40       	sbci	r24, 0x00	; 0
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <__stack+0x4f>
     8ae:	00 00       	nop
						_delay_ms(1000);
						wrongPasscode++;
     8b0:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <wrongPasscode>
     8b4:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <wrongPasscode+0x1>
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <wrongPasscode+0x1>
     8be:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <wrongPasscode>
     8c2:	16 c0       	rjmp	.+44     	; 0x8f0 <__stack+0x91>
					}
				}
				else {
					LCD_writeStr("  Incomplete");
     8c4:	84 e6       	ldi	r24, 0x64	; 100
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     8cc:	9f e3       	ldi	r25, 0x3F	; 63
     8ce:	2d e0       	ldi	r18, 0x0D	; 13
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	91 50       	subi	r25, 0x01	; 1
     8d4:	20 40       	sbci	r18, 0x00	; 0
     8d6:	80 40       	sbci	r24, 0x00	; 0
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <__stack+0x73>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <__stack+0x7d>
     8dc:	00 00       	nop
					_delay_ms(1000);
					wrongPasscode++;
     8de:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <wrongPasscode>
     8e2:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <wrongPasscode+0x1>
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <wrongPasscode+0x1>
     8ec:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <wrongPasscode>
				}
				if(wrongPasscode>=3)
     8f0:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <wrongPasscode>
     8f4:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <wrongPasscode+0x1>
     8f8:	03 97       	sbiw	r24, 0x03	; 3
     8fa:	14 f0       	brlt	.+4      	; 0x900 <__stack+0xa1>
						buzzer();
     8fc:	0e 94 88 00 	call	0x110	; 0x110 <buzzer>
     900:	83 ed       	ldi	r24, 0xD3	; 211
     902:	90 e3       	ldi	r25, 0x30	; 48
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0xa5>
     908:	00 c0       	rjmp	.+0      	; 0x90a <__stack+0xab>
     90a:	00 00       	nop
				_delay_ms(50);
				LCD_clrScnd(); // Clear display
     90c:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
				LCD_setCursor(1,0);
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
			_delay_ms(700);
			
			char passcode[5];
			bool isValid = false;
			
			while(IR_check()){
     918:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     91c:	81 11       	cpse	r24, r1
     91e:	8a cf       	rjmp	.-236    	; 0x834 <main+0xac>
				LCD_clrScnd(); // Clear display
				LCD_setCursor(1,0);
				}
				
				//------once passcode is correctly entered
				LCD_clr();
     920:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
     924:	8d ee       	ldi	r24, 0xED	; 237
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <__stack+0xc9>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0xcf>
     92e:	00 00       	nop
				_delay_ms(3);
				LCD_setCursor(0,0);
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
				
				char choice;
				while(IR_check()){ //as long as ir sensed you it displays options 
     938:	60 c3       	rjmp	.+1728   	; 0xffa <__stack+0x79b>
					LCD_Options();
     93a:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_Options>
     93e:	87 e8       	ldi	r24, 0x87	; 135
     940:	93 e1       	ldi	r25, 0x13	; 19
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <__stack+0xe3>
     946:	00 c0       	rjmp	.+0      	; 0x948 <__stack+0xe9>
     948:	00 00       	nop
     94a:	05 c0       	rjmp	.+10     	; 0x956 <__stack+0xf7>
					_delay_ms(20);
					while(IR_check()){
					choice=getChar();
     94c:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
     950:	18 2f       	mov	r17, r24
					if(choice !='N') break;	
     952:	8e 34       	cpi	r24, 0x4E	; 78
     954:	21 f4       	brne	.+8      	; 0x95e <__stack+0xff>
				
				char choice;
				while(IR_check()){ //as long as ir sensed you it displays options 
					LCD_Options();
					_delay_ms(20);
					while(IR_check()){
     956:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     95a:	81 11       	cpse	r24, r1
     95c:	f7 cf       	rjmp	.-18     	; 0x94c <__stack+0xed>
					choice=getChar();
					if(choice !='N') break;	
					}
					char exit;
					if(choice=='1'){ 	//temperature selected
     95e:	11 33       	cpi	r17, 0x31	; 49
     960:	79 f5       	brne	.+94     	; 0x9c0 <__stack+0x161>
						LCD_writeStr("1");
     962:	81 e7       	ldi	r24, 0x71	; 113
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     96a:	8b e7       	ldi	r24, 0x7B	; 123
     96c:	92 e9       	ldi	r25, 0x92	; 146
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <__stack+0x10f>
     972:	00 c0       	rjmp	.+0      	; 0x974 <__stack+0x115>
     974:	00 00       	nop
						_delay_ms(150);
						LCD_clr();
     976:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
						LCD_setCursor(0,0);
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
						LCD_writeStr("Temperature= ");
     982:	83 e7       	ldi	r24, 0x73	; 115
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
						LCD_setCursor(1,0);
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
						LCD_writeStr("press 0 to Exit");
     992:	81 e8       	ldi	r24, 0x81	; 129
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
						
						while(IR_check()){ //while it senses you 
     99a:	0c c0       	rjmp	.+24     	; 0x9b4 <__stack+0x155>
							exit=getChar();
     99c:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
							if(exit=='0'){
     9a0:	80 33       	cpi	r24, 0x30	; 48
     9a2:	31 f4       	brne	.+12     	; 0x9b0 <__stack+0x151>
								OCR2=0; //close fan
     9a4:	13 bc       	out	0x23, r1	; 35
								count=0; //to start fan of first speed not the speed we exit from
     9a6:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <__data_end+0x1>
     9aa:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <__data_end>
								 break; //close this mode if you pressed 0 (also close fan )
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <__stack+0x15d>
							}
							Temp_reading(); //in temperature.c
     9b0:	0e 94 0f 09 	call	0x121e	; 0x121e <Temp_reading>
						LCD_setCursor(0,0);
						LCD_writeStr("Temperature= ");
						LCD_setCursor(1,0);
						LCD_writeStr("press 0 to Exit");
						
						while(IR_check()){ //while it senses you 
     9b4:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     9b8:	81 11       	cpse	r24, r1
     9ba:	f0 cf       	rjmp	.-32     	; 0x99c <__stack+0x13d>
								count=0; //to start fan of first speed not the speed we exit from
								 break; //close this mode if you pressed 0 (also close fan )
							}
							Temp_reading(); //in temperature.c
						}
						PORTA &= ~(1<<7); //disabling the en pin of dc motor
     9bc:	df 98       	cbi	0x1b, 7	; 27
     9be:	1d c3       	rjmp	.+1594   	; 0xffa <__stack+0x79b>
						
					}
					else if(choice=='2'){ //heartbeat rate selected
     9c0:	12 33       	cpi	r17, 0x32	; 50
     9c2:	91 f5       	brne	.+100    	; 0xa28 <__stack+0x1c9>
     9c4:	2c c0       	rjmp	.+88     	; 0xa1e <__stack+0x1bf>
						
						while(IR_check()){
							exit=getChar();
     9c6:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
							if(exit=='0') break;
     9ca:	80 33       	cpi	r24, 0x30	; 48
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <__stack+0x171>
     9ce:	15 c3       	rjmp	.+1578   	; 0xffa <__stack+0x79b>
							// Display BPM on LCD
							LCD_clr();
     9d0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
     9d4:	8d ee       	ldi	r24, 0xED	; 237
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <__stack+0x179>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <__stack+0x17f>
     9de:	00 00       	nop
							_delay_ms(3);
							LCD_setCursor(0,0);
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
							LCD_writeStr("BPM = ");
     9e8:	8f e0       	ldi	r24, 0x0F	; 15
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
							LCD_wriInt(bpm,0,6);
     9f0:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <bpm>
     9f4:	46 e0       	ldi	r20, 0x06	; 6
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
							LCD_setCursor(1,0);
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
							LCD_writeStr("press 0 to Exit ");
     a0a:	81 e9       	ldi	r24, 0x91	; 145
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     a12:	83 ec       	ldi	r24, 0xC3	; 195
     a14:	99 e0       	ldi	r25, 0x09	; 9
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	f1 f7       	brne	.-4      	; 0xa16 <__stack+0x1b7>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <__stack+0x1bd>
     a1c:	00 00       	nop
						PORTA &= ~(1<<7); //disabling the en pin of dc motor
						
					}
					else if(choice=='2'){ //heartbeat rate selected
						
						while(IR_check()){
     a1e:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     a22:	81 11       	cpse	r24, r1
     a24:	d0 cf       	rjmp	.-96     	; 0x9c6 <__stack+0x167>
     a26:	e9 c2       	rjmp	.+1490   	; 0xffa <__stack+0x79b>
							LCD_writeStr("press 0 to Exit ");
							_delay_ms(10);
						}
					}
					
					else if(choice=='3'){ //medication mode selected
     a28:	13 33       	cpi	r17, 0x33	; 51
     a2a:	09 f0       	breq	.+2      	; 0xa2e <__stack+0x1cf>
     a2c:	84 c0       	rjmp	.+264    	; 0xb36 <__stack+0x2d7>
						servo_init();
     a2e:	0e 94 8b 08 	call	0x1116	; 0x1116 <servo_init>
     a32:	87 ea       	ldi	r24, 0xA7	; 167
     a34:	91 e6       	ldi	r25, 0x61	; 97
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	f1 f7       	brne	.-4      	; 0xa36 <__stack+0x1d7>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <__stack+0x1dd>
     a3c:	00 00       	nop
						_delay_ms(100);
						LCD_clr();
     a3e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
     a42:	8d ee       	ldi	r24, 0xED	; 237
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <__stack+0x1e7>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <__stack+0x1ed>
     a4c:	00 00       	nop
     a4e:	6e c0       	rjmp	.+220    	; 0xb2c <__stack+0x2cd>
						_delay_ms(3);
						while(IR_check()){
							LCD_setCursor(0,0);
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
							OCR2 = 700; //makes servo angle=0 degree
     a58:	23 bc       	out	0x23, r2	; 35
							LCD_writeStr("Medication time?");
     a5a:	82 ea       	ldi	r24, 0xA2	; 162
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
							LCD_setCursor(1,0);
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
							LCD_writeStr("0 = NO / 1 = YES");
     a6a:	83 eb       	ldi	r24, 0xB3	; 179
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     a72:	83 ec       	ldi	r24, 0xC3	; 195
     a74:	99 e0       	ldi	r25, 0x09	; 9
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <__stack+0x217>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <__stack+0x21d>
     a7c:	00 00       	nop
							_delay_ms(10);
							exit=getChar();	
     a7e:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
							if(exit=='0') break;
     a82:	80 33       	cpi	r24, 0x30	; 48
     a84:	09 f0       	breq	.+2      	; 0xa88 <__stack+0x229>
     a86:	4f c0       	rjmp	.+158    	; 0xb26 <__stack+0x2c7>
     a88:	b8 c2       	rjmp	.+1392   	; 0xffa <__stack+0x79b>
							while(exit=='1'){
								//if it is medication time
								OCR2 = 250; //makes servo angle=90 degrees
     a8a:	33 bc       	out	0x23, r3	; 35
     a8c:	87 ea       	ldi	r24, 0xA7	; 167
     a8e:	91 e6       	ldi	r25, 0x61	; 97
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <__stack+0x231>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <__stack+0x237>
     a96:	00 00       	nop
								_delay_ms(100);
								LCD_clr();
     a98:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
								LCD_setCursor(0,0);
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
								LCD_writeStr("Drawer Open !");
     aa4:	84 ec       	ldi	r24, 0xC4	; 196
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
								LCD_setCursor(1,0);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
								LCD_writeStr("Take your Bills !");
     ab4:	82 ed       	ldi	r24, 0xD2	; 210
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     abc:	87 ea       	ldi	r24, 0xA7	; 167
     abe:	91 e6       	ldi	r25, 0x61	; 97
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <__stack+0x261>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <__stack+0x267>
     ac6:	00 00       	nop
								_delay_ms(100);
								LCD_setCursor(1,0);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
								LCD_writeStr("finish? hold = ");
     ad0:	84 ee       	ldi	r24, 0xE4	; 228
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     ad8:	8f e4       	ldi	r24, 0x4F	; 79
     ada:	93 ec       	ldi	r25, 0xC3	; 195
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <__stack+0x27d>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <__stack+0x283>
     ae2:	00 00       	nop
								_delay_ms(200);
								if(getChar()=='='){
     ae4:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
     ae8:	8d 33       	cpi	r24, 0x3D	; 61
     aea:	79 f6       	brne	.-98     	; 0xa8a <__stack+0x22b>
									OCR2 = 700; //makes servo angle=0 degree
     aec:	23 bc       	out	0x23, r2	; 35
									LCD_clr();
     aee:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
									LCD_setCursor(0,0);
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
									LCD_writeStr("Drawer closed!");
     afa:	84 ef       	ldi	r24, 0xF4	; 244
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
									LCD_setCursor(1,0);
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
									LCD_writeStr("with great Health!");
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     b12:	9f e9       	ldi	r25, 0x9F	; 159
     b14:	26 e8       	ldi	r18, 0x86	; 134
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	91 50       	subi	r25, 0x01	; 1
     b1a:	20 40       	sbci	r18, 0x00	; 0
     b1c:	80 40       	sbci	r24, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <__stack+0x2b9>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <__stack+0x2c3>
     b22:	00 00       	nop
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <__stack+0x2cd>
							LCD_setCursor(1,0);
							LCD_writeStr("0 = NO / 1 = YES");
							_delay_ms(10);
							exit=getChar();	
							if(exit=='0') break;
							while(exit=='1'){
     b26:	81 33       	cpi	r24, 0x31	; 49
     b28:	09 f4       	brne	.+2      	; 0xb2c <__stack+0x2cd>
     b2a:	af cf       	rjmp	.-162    	; 0xa8a <__stack+0x22b>
					else if(choice=='3'){ //medication mode selected
						servo_init();
						_delay_ms(100);
						LCD_clr();
						_delay_ms(3);
						while(IR_check()){
     b2c:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     b30:	81 11       	cpse	r24, r1
     b32:	8e cf       	rjmp	.-228    	; 0xa50 <__stack+0x1f1>
     b34:	62 c2       	rjmp	.+1220   	; 0xffa <__stack+0x79b>
							}
							
						}
					}
					
					else if(choice=='4'){ //Distance selected
     b36:	14 33       	cpi	r17, 0x34	; 52
     b38:	09 f0       	breq	.+2      	; 0xb3c <__stack+0x2dd>
     b3a:	ce c0       	rjmp	.+412    	; 0xcd8 <__stack+0x479>
     b3c:	be c0       	rjmp	.+380    	; 0xcba <__stack+0x45b>
						int16_t  xRes=0,yRes=0,xOld=0,yOld=0;
						int distance=0;
						int try=0;
						while(IR_check()){
							exit=getChar();
     b3e:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
							if(exit=='0') break;
     b42:	80 33       	cpi	r24, 0x30	; 48
     b44:	09 f4       	brne	.+2      	; 0xb48 <__stack+0x2e9>
     b46:	58 c2       	rjmp	.+1200   	; 0xff8 <__stack+0x799>
							//units of x,y coordinates in g-forces
							xRes=ADC_Read(2); //x is connected to PA2
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_Read>
     b4e:	7c 01       	movw	r14, r24
							yRes=ADC_Read(3); // y is connected to PA3
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_Read>
     b56:	8c 01       	movw	r16, r24

							// Convert ADC readings to centimeters
							xRes *= CALIBRATION_X_FACTOR;
     b58:	b7 01       	movw	r22, r14
     b5a:	ff 0c       	add	r15, r15
     b5c:	88 0b       	sbc	r24, r24
     b5e:	99 0b       	sbc	r25, r25
     b60:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     b64:	2d ec       	ldi	r18, 0xCD	; 205
     b66:	3c ec       	ldi	r19, 0xCC	; 204
     b68:	4c e4       	ldi	r20, 0x4C	; 76
     b6a:	5a e3       	ldi	r21, 0x3A	; 58
     b6c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__mulsf3>
     b70:	0e 94 a1 09 	call	0x1342	; 0x1342 <__fixsfsi>
     b74:	6e 83       	std	Y+6, r22	; 0x06
     b76:	7f 83       	std	Y+7, r23	; 0x07
     b78:	88 87       	std	Y+8, r24	; 0x08
     b7a:	99 87       	std	Y+9, r25	; 0x09
							yRes *= CALIBRATION_Y_FACTOR;
     b7c:	b8 01       	movw	r22, r16
     b7e:	11 0f       	add	r17, r17
     b80:	88 0b       	sbc	r24, r24
     b82:	99 0b       	sbc	r25, r25
     b84:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     b88:	2d ec       	ldi	r18, 0xCD	; 205
     b8a:	3c ec       	ldi	r19, 0xCC	; 204
     b8c:	4c e4       	ldi	r20, 0x4C	; 76
     b8e:	5a e3       	ldi	r21, 0x3A	; 58
     b90:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__mulsf3>
     b94:	0e 94 a1 09 	call	0x1342	; 0x1342 <__fixsfsi>
     b98:	6a 87       	std	Y+10, r22	; 0x0a
     b9a:	7b 87       	std	Y+11, r23	; 0x0b
     b9c:	8c 87       	std	Y+12, r24	; 0x0c
     b9e:	9d 87       	std	Y+13, r25	; 0x0d
							// Display distance on LCD
							DisplayCoordinates(xRes,yRes);
     ba0:	6a 85       	ldd	r22, Y+10	; 0x0a
     ba2:	7b 85       	ldd	r23, Y+11	; 0x0b
     ba4:	8e 81       	ldd	r24, Y+6	; 0x06
     ba6:	9f 81       	ldd	r25, Y+7	; 0x07
     ba8:	0e 94 5b 00 	call	0xb6	; 0xb6 <DisplayCoordinates>
     bac:	83 ed       	ldi	r24, 0xD3	; 211
     bae:	90 e3       	ldi	r25, 0x30	; 48
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <__stack+0x351>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <__stack+0x357>
     bb6:	00 00       	nop
							
							_delay_ms(50);
							if(try>1){ //skip first 2 readings
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	49 16       	cp	r4, r25
     bbc:	51 04       	cpc	r5, r1
     bbe:	0c f4       	brge	.+2      	; 0xbc2 <__stack+0x363>
     bc0:	64 c0       	rjmp	.+200    	; 0xc8a <__stack+0x42b>
									distance+=round(sqrt(pow((xRes-xOld),2)+pow((yRes-yOld),2)));
     bc2:	6e 81       	ldd	r22, Y+6	; 0x06
     bc4:	7f 81       	ldd	r23, Y+7	; 0x07
     bc6:	6c 19       	sub	r22, r12
     bc8:	7d 09       	sbc	r23, r13
     bca:	07 2e       	mov	r0, r23
     bcc:	00 0c       	add	r0, r0
     bce:	88 0b       	sbc	r24, r24
     bd0:	99 0b       	sbc	r25, r25
     bd2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     bd6:	6b 01       	movw	r12, r22
     bd8:	7c 01       	movw	r14, r24
     bda:	6a 85       	ldd	r22, Y+10	; 0x0a
     bdc:	7b 85       	ldd	r23, Y+11	; 0x0b
     bde:	68 19       	sub	r22, r8
     be0:	79 09       	sbc	r23, r9
     be2:	07 2e       	mov	r0, r23
     be4:	00 0c       	add	r0, r0
     be6:	88 0b       	sbc	r24, r24
     be8:	99 0b       	sbc	r25, r25
     bea:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     bee:	4b 01       	movw	r8, r22
     bf0:	5c 01       	movw	r10, r24
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__mulsf3>
     bfa:	6e 87       	std	Y+14, r22	; 0x0e
     bfc:	7f 87       	std	Y+15, r23	; 0x0f
     bfe:	88 8b       	std	Y+16, r24	; 0x10
     c00:	99 8b       	std	Y+17, r25	; 0x11
     c02:	a5 01       	movw	r20, r10
     c04:	94 01       	movw	r18, r8
     c06:	c5 01       	movw	r24, r10
     c08:	b4 01       	movw	r22, r8
     c0a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__mulsf3>
     c0e:	4b 01       	movw	r8, r22
     c10:	5c 01       	movw	r10, r24
     c12:	a7 01       	movw	r20, r14
     c14:	96 01       	movw	r18, r12
     c16:	c7 01       	movw	r24, r14
     c18:	b6 01       	movw	r22, r12
     c1a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__mulsf3>
     c1e:	9b 01       	movw	r18, r22
     c20:	ac 01       	movw	r20, r24
     c22:	c5 01       	movw	r24, r10
     c24:	b4 01       	movw	r22, r8
     c26:	0e 94 35 09 	call	0x126a	; 0x126a <__addsf3>
     c2a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <sqrt>
     c2e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <round>
     c32:	6b 01       	movw	r12, r22
     c34:	7c 01       	movw	r14, r24
     c36:	b3 01       	movw	r22, r6
     c38:	77 0c       	add	r7, r7
     c3a:	88 0b       	sbc	r24, r24
     c3c:	99 0b       	sbc	r25, r25
     c3e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     c42:	a7 01       	movw	r20, r14
     c44:	96 01       	movw	r18, r12
     c46:	0e 94 35 09 	call	0x126a	; 0x126a <__addsf3>
     c4a:	0e 94 a1 09 	call	0x1342	; 0x1342 <__fixsfsi>
     c4e:	6b 01       	movw	r12, r22
     c50:	7c 01       	movw	r14, r24
     c52:	3b 01       	movw	r6, r22
									LCD_clrScnd();
     c54:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
									LCD_setCursor(1,0);
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
									LCD_writeStr("dist= ");
     c60:	86 e1       	ldi	r24, 0x16	; 22
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
									LCD_wriInt(distance,1,6);
     c68:	46 e0       	ldi	r20, 0x06	; 6
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	c6 01       	movw	r24, r12
     c72:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
									LCD_writeStr("cm");
     c76:	8d e1       	ldi	r24, 0x1D	; 29
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     c7e:	87 ea       	ldi	r24, 0xA7	; 167
     c80:	91 e6       	ldi	r25, 0x61	; 97
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <__stack+0x423>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <__stack+0x429>
     c88:	00 00       	nop
									_delay_ms(100);
							}
							yOld=yRes;
							xOld=xRes;
							LCD_clrScnd();
     c8a:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
							LCD_setCursor(1,0);
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
							LCD_writeStr("hold 0 to Exit");
     c96:	80 e2       	ldi	r24, 0x20	; 32
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     c9e:	83 ed       	ldi	r24, 0xD3	; 211
     ca0:	90 e3       	ldi	r25, 0x30	; 48
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <__stack+0x443>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <__stack+0x449>
     ca8:	00 00       	nop
							_delay_ms(50);
							try++;
     caa:	9f ef       	ldi	r25, 0xFF	; 255
     cac:	49 1a       	sub	r4, r25
     cae:	59 0a       	sbc	r5, r25
									LCD_writeStr("dist= ");
									LCD_wriInt(distance,1,6);
									LCD_writeStr("cm");
									_delay_ms(100);
							}
							yOld=yRes;
     cb0:	8a 84       	ldd	r8, Y+10	; 0x0a
     cb2:	9b 84       	ldd	r9, Y+11	; 0x0b
							xOld=xRes;
     cb4:	ce 80       	ldd	r12, Y+6	; 0x06
     cb6:	df 80       	ldd	r13, Y+7	; 0x07
     cb8:	09 c0       	rjmp	.+18     	; 0xccc <__stack+0x46d>
     cba:	41 2c       	mov	r4, r1
     cbc:	51 2c       	mov	r5, r1
     cbe:	61 2c       	mov	r6, r1
     cc0:	71 2c       	mov	r7, r1
     cc2:	81 2c       	mov	r8, r1
     cc4:	91 2c       	mov	r9, r1
     cc6:	c1 2c       	mov	r12, r1
     cc8:	d1 2c       	mov	r13, r1
     cca:	1a 8b       	std	Y+18, r17	; 0x12
					
					else if(choice=='4'){ //Distance selected
						int16_t  xRes=0,yRes=0,xOld=0,yOld=0;
						int distance=0;
						int try=0;
						while(IR_check()){
     ccc:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     cd0:	81 11       	cpse	r24, r1
     cd2:	35 cf       	rjmp	.-406    	; 0xb3e <__stack+0x2df>
     cd4:	1a 89       	ldd	r17, Y+18	; 0x12
     cd6:	91 c1       	rjmp	.+802    	; 0xffa <__stack+0x79b>
							try++;
						}
					}
					
					
					else if(choice=='5'){ //stop watch
     cd8:	15 33       	cpi	r17, 0x35	; 53
     cda:	09 f0       	breq	.+2      	; 0xcde <__stack+0x47f>
     cdc:	4a c0       	rjmp	.+148    	; 0xd72 <__stack+0x513>
						LCD_clr();
     cde:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
						LCD_clrfirst();
     ce2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_clrfirst>
						LCD_setCursor(0,9);
     ce6:	69 e0       	ldi	r22, 0x09	; 9
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
						LCD_writeStr("o->Exit");
     cee:	8f e2       	ldi	r24, 0x2F	; 47
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
						LCD_setCursor(1,0);
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
						LCD_writeStr("1->stop/2->reset");
     cfe:	87 e3       	ldi	r24, 0x37	; 55
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
						start_stopWatch();
     d06:	0e 94 ab 08 	call	0x1156	; 0x1156 <start_stopWatch>
						while(IR_check()){
     d0a:	2e c0       	rjmp	.+92     	; 0xd68 <__stack+0x509>
							displayTime();
     d0c:	0e 94 c3 08 	call	0x1186	; 0x1186 <displayTime>
							exit=getChar();
     d10:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
							if(exit=='0') {
     d14:	80 33       	cpi	r24, 0x30	; 48
     d16:	49 f4       	brne	.+18     	; 0xd2a <__stack+0x4cb>
								stop_stopWatch();
     d18:	0e 94 b2 08 	call	0x1164	; 0x1164 <stop_stopWatch>
								seconds=0;
     d1c:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <seconds>
								minutes=0;
     d20:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <minutes>
								hours=0;
     d24:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <hours>
								break;
     d28:	68 c1       	rjmp	.+720    	; 0xffa <__stack+0x79b>
							}
							else if (exit=='1') {
     d2a:	81 33       	cpi	r24, 0x31	; 49
     d2c:	79 f4       	brne	.+30     	; 0xd4c <__stack+0x4ed>
								stop_stopWatch();
     d2e:	0e 94 b2 08 	call	0x1164	; 0x1164 <stop_stopWatch>
								
								while(IR_check()){
     d32:	07 c0       	rjmp	.+14     	; 0xd42 <__stack+0x4e3>
									if(getChar()=='1'){
     d34:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
     d38:	81 33       	cpi	r24, 0x31	; 49
     d3a:	19 f4       	brne	.+6      	; 0xd42 <__stack+0x4e3>
										start_stopWatch();
     d3c:	0e 94 ab 08 	call	0x1156	; 0x1156 <start_stopWatch>
										break;
     d40:	13 c0       	rjmp	.+38     	; 0xd68 <__stack+0x509>
								break;
							}
							else if (exit=='1') {
								stop_stopWatch();
								
								while(IR_check()){
     d42:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     d46:	81 11       	cpse	r24, r1
     d48:	f5 cf       	rjmp	.-22     	; 0xd34 <__stack+0x4d5>
     d4a:	0e c0       	rjmp	.+28     	; 0xd68 <__stack+0x509>
										start_stopWatch();
										break;
									}
								}
							}
							else if (exit=='2'){
     d4c:	82 33       	cpi	r24, 0x32	; 50
     d4e:	61 f4       	brne	.+24     	; 0xd68 <__stack+0x509>
								 reset_stopWatch();
     d50:	0e 94 b6 08 	call	0x116c	; 0x116c <reset_stopWatch>
								 LCD_clrfirst();
     d54:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_clrfirst>
								 LCD_setCursor(0,9);
     d58:	69 e0       	ldi	r22, 0x09	; 9
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
								 LCD_writeStr("o->Exit");
     d60:	8f e2       	ldi	r24, 0x2F	; 47
     d62:	92 e0       	ldi	r25, 0x02	; 2
     d64:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
						LCD_setCursor(0,9);
						LCD_writeStr("o->Exit");
						LCD_setCursor(1,0);
						LCD_writeStr("1->stop/2->reset");
						start_stopWatch();
						while(IR_check()){
     d68:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     d6c:	81 11       	cpse	r24, r1
     d6e:	ce cf       	rjmp	.-100    	; 0xd0c <__stack+0x4ad>
     d70:	44 c1       	rjmp	.+648    	; 0xffa <__stack+0x79b>
							}
						}
					}
					
					
					else if(choice=='6'){ //sleep monitoring selected
     d72:	16 33       	cpi	r17, 0x36	; 54
     d74:	09 f0       	breq	.+2      	; 0xd78 <__stack+0x519>
     d76:	41 c1       	rjmp	.+642    	; 0xffa <__stack+0x79b>
     d78:	d7 c0       	rjmp	.+430    	; 0xf28 <__stack+0x6c9>
						int turnedLeft=0;
						int turnedRight=0;
						int disturbed=0;
						int slept=1; //bec sleep mode is initiated when person is slept (initialized with 1 not 0)
						while(IR_check()){
							exit=getChar();
     d7a:	0e 94 1c 01 	call	0x238	; 0x238 <getChar>
							if(exit=='0') break;
     d7e:	80 33       	cpi	r24, 0x30	; 48
     d80:	09 f4       	brne	.+2      	; 0xd84 <__stack+0x525>
     d82:	e7 c0       	rjmp	.+462    	; 0xf52 <__stack+0x6f3>
							
							// Display message on LCD
							LCD_clr();
     d84:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
							LCD_setCursor(0,0);
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
							LCD_writeStr("Sweet Dreams !");
     d90:	88 e4       	ldi	r24, 0x48	; 72
     d92:	92 e0       	ldi	r25, 0x02	; 2
     d94:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
							LCD_setCursor(1,0);
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
							LCD_writeStr("hold 0 if awaken");
     da0:	87 e5       	ldi	r24, 0x57	; 87
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     da8:	2f e9       	ldi	r18, 0x9F	; 159
     daa:	86 e8       	ldi	r24, 0x86	; 134
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	21 50       	subi	r18, 0x01	; 1
     db0:	80 40       	sbci	r24, 0x00	; 0
     db2:	90 40       	sbci	r25, 0x00	; 0
     db4:	e1 f7       	brne	.-8      	; 0xdae <__stack+0x54f>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <__stack+0x559>
     db8:	00 00       	nop
							_delay_ms(500);
							
							//units of x,y coordinates in g-forces
							xRes=ADC_Read(2); //x is connected to PA2
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_Read>
     dc0:	6c 01       	movw	r12, r24
							yRes=ADC_Read(3); // y is connected to PA3
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_Read>
     dc8:	8c 01       	movw	r16, r24

							// Convert ADC readings to tens of cm
							xRes *= CALIBRATION_X_FACTOR*10;
     dca:	b6 01       	movw	r22, r12
     dcc:	dd 0c       	add	r13, r13
     dce:	88 0b       	sbc	r24, r24
     dd0:	99 0b       	sbc	r25, r25
     dd2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	5c e3       	ldi	r21, 0x3C	; 60
     dde:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__mulsf3>
     de2:	0e 94 a1 09 	call	0x1342	; 0x1342 <__fixsfsi>
     de6:	4b 01       	movw	r8, r22
     de8:	5c 01       	movw	r10, r24
							yRes *= CALIBRATION_Y_FACTOR*10;
     dea:	b8 01       	movw	r22, r16
     dec:	11 0f       	add	r17, r17
     dee:	88 0b       	sbc	r24, r24
     df0:	99 0b       	sbc	r25, r25
     df2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	5c e3       	ldi	r21, 0x3C	; 60
     dfe:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__mulsf3>
     e02:	0e 94 a1 09 	call	0x1342	; 0x1342 <__fixsfsi>
     e06:	8b 01       	movw	r16, r22
							
							
							 
							if(xRes!=xOld||yRes!=yOld){
     e08:	8e 14       	cp	r8, r14
     e0a:	9f 04       	cpc	r9, r15
     e0c:	31 f4       	brne	.+12     	; 0xe1a <__stack+0x5bb>
     e0e:	66 15       	cp	r22, r6
     e10:	77 05       	cpc	r23, r7
     e12:	09 f0       	breq	.+2      	; 0xe16 <__stack+0x5b7>
     e14:	01 c1       	rjmp	.+514    	; 0x1018 <__stack+0x7b9>
								buzzer(); // to awaken him
								_delay_ms(100);
								
							}
						}
						yOld=yRes;
     e16:	83 01       	movw	r16, r6
     e18:	84 c0       	rjmp	.+264    	; 0xf22 <__stack+0x6c3>
							
							
							 
							if(xRes!=xOld||yRes!=yOld){
								//display his new position according to bed
								DisplayCoordinates(xRes,yRes);
     e1a:	c4 01       	movw	r24, r8
     e1c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DisplayCoordinates>
								if(xRes>xOld){ //means he turned left while sleeping
     e20:	e8 14       	cp	r14, r8
     e22:	f9 04       	cpc	r15, r9
     e24:	c4 f4       	brge	.+48     	; 0xe56 <__stack+0x5f7>
									 turnedRight++;
     e26:	8a 85       	ldd	r24, Y+10	; 0x0a
     e28:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	9b 87       	std	Y+11, r25	; 0x0b
     e2e:	8a 87       	std	Y+10, r24	; 0x0a
									 LCD_clrfirst();
     e30:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_clrfirst>
									 LCD_setCursor(0,0);
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
									 LCD_writeStr("you turned right");
     e3c:	88 e6       	ldi	r24, 0x68	; 104
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     e44:	87 ea       	ldi	r24, 0xA7	; 167
     e46:	91 e6       	ldi	r25, 0x61	; 97
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <__stack+0x5e9>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <__stack+0x5ef>
     e4e:	00 00       	nop
									 _delay_ms(100);
									 LCD_clrfirst();
     e50:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_clrfirst>
     e54:	18 c0       	rjmp	.+48     	; 0xe86 <__stack+0x627>
								}
								else if(xRes<xOld){
     e56:	8e 14       	cp	r8, r14
     e58:	9f 04       	cpc	r9, r15
     e5a:	ac f4       	brge	.+42     	; 0xe86 <__stack+0x627>
									 turnedLeft++;
     e5c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e5e:	9f 85       	ldd	r25, Y+15	; 0x0f
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	9f 87       	std	Y+15, r25	; 0x0f
     e64:	8e 87       	std	Y+14, r24	; 0x0e
									 LCD_clrfirst();
     e66:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_clrfirst>
									 LCD_setCursor(0,0);
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
									 LCD_writeStr("you turned left");
     e72:	89 e7       	ldi	r24, 0x79	; 121
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     e7a:	87 ea       	ldi	r24, 0xA7	; 167
     e7c:	91 e6       	ldi	r25, 0x61	; 97
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <__stack+0x61f>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <__stack+0x625>
     e84:	00 00       	nop
									 _delay_ms(100);
								}
								if(yRes>yOld){
     e86:	60 16       	cp	r6, r16
     e88:	71 06       	cpc	r7, r17
     e8a:	cc f4       	brge	.+50     	; 0xebe <__stack+0x65f>
									if(disturbed<slept){ //so it doesnot count the distrubed times unless the person fell asleep before 
     e8c:	8e 81       	ldd	r24, Y+6	; 0x06
     e8e:	9f 81       	ldd	r25, Y+7	; 0x07
     e90:	48 16       	cp	r4, r24
     e92:	59 06       	cpc	r5, r25
     e94:	84 f5       	brge	.+96     	; 0xef6 <__stack+0x697>
										 disturbed++;
     e96:	9f ef       	ldi	r25, 0xFF	; 255
     e98:	49 1a       	sub	r4, r25
     e9a:	59 0a       	sbc	r5, r25
										 LCD_clrfirst();
     e9c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_clrfirst>
										 LCD_setCursor(0,0);
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
										 LCD_writeStr("Disturbed !");
     ea8:	89 e8       	ldi	r24, 0x89	; 137
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     eb0:	87 ea       	ldi	r24, 0xA7	; 167
     eb2:	91 e6       	ldi	r25, 0x61	; 97
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <__stack+0x655>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <__stack+0x65b>
     eba:	00 00       	nop
     ebc:	1c c0       	rjmp	.+56     	; 0xef6 <__stack+0x697>
										 _delay_ms(100);
									}
								}
								else if(yRes<yOld){
     ebe:	06 15       	cp	r16, r6
     ec0:	17 05       	cpc	r17, r7
     ec2:	cc f4       	brge	.+50     	; 0xef6 <__stack+0x697>
									if(disturbed==slept){ //so it dooesnot count the slept times unless the person was disturbed before
     ec4:	8e 81       	ldd	r24, Y+6	; 0x06
     ec6:	9f 81       	ldd	r25, Y+7	; 0x07
     ec8:	48 16       	cp	r4, r24
     eca:	59 06       	cpc	r5, r25
     ecc:	a1 f4       	brne	.+40     	; 0xef6 <__stack+0x697>
										slept++;
     ece:	c2 01       	movw	r24, r4
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	9f 83       	std	Y+7, r25	; 0x07
     ed4:	8e 83       	std	Y+6, r24	; 0x06
										LCD_clrfirst();
     ed6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_clrfirst>
										LCD_setCursor(0,0);
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
										LCD_writeStr("fell back asleep!");
     ee2:	85 e9       	ldi	r24, 0x95	; 149
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     eea:	87 ea       	ldi	r24, 0xA7	; 167
     eec:	91 e6       	ldi	r25, 0x61	; 97
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <__stack+0x68f>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <__stack+0x695>
     ef4:	00 00       	nop
										_delay_ms(100);
									}
								}
							if(xRes>80||xRes<20){ //means he is about to fall off the bed
     ef6:	c4 01       	movw	r24, r8
     ef8:	44 97       	sbiw	r24, 0x14	; 20
     efa:	cd 97       	sbiw	r24, 0x3d	; 61
     efc:	90 f0       	brcs	.+36     	; 0xf22 <__stack+0x6c3>
								LCD_clrfirst();
     efe:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_clrfirst>
								LCD_setCursor(0,0);
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
								LCD_writeStr("about to FallOFF");
     f0a:	87 ea       	ldi	r24, 0xA7	; 167
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
								buzzer(); // to awaken him
     f12:	0e 94 88 00 	call	0x110	; 0x110 <buzzer>
     f16:	87 ea       	ldi	r24, 0xA7	; 167
     f18:	91 e6       	ldi	r25, 0x61	; 97
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <__stack+0x6bb>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <__stack+0x6c1>
     f20:	00 00       	nop
     f22:	38 01       	movw	r6, r16
     f24:	74 01       	movw	r14, r8
     f26:	11 c0       	rjmp	.+34     	; 0xf4a <__stack+0x6eb>
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	1f 82       	std	Y+7, r1	; 0x07
     f2e:	41 2c       	mov	r4, r1
     f30:	51 2c       	mov	r5, r1
     f32:	1b 86       	std	Y+11, r1	; 0x0b
     f34:	1a 86       	std	Y+10, r1	; 0x0a
     f36:	1f 86       	std	Y+15, r1	; 0x0f
     f38:	1e 86       	std	Y+14, r1	; 0x0e
     f3a:	61 2c       	mov	r6, r1
     f3c:	71 2c       	mov	r7, r1
     f3e:	0f 2e       	mov	r0, r31
     f40:	f2 e3       	ldi	r31, 0x32	; 50
     f42:	ef 2e       	mov	r14, r31
     f44:	f1 2c       	mov	r15, r1
     f46:	f0 2d       	mov	r31, r0
     f48:	1a 8b       	std	Y+18, r17	; 0x12
						int distanceY=0;
						int turnedLeft=0;
						int turnedRight=0;
						int disturbed=0;
						int slept=1; //bec sleep mode is initiated when person is slept (initialized with 1 not 0)
						while(IR_check()){
     f4a:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     f4e:	81 11       	cpse	r24, r1
     f50:	14 cf       	rjmp	.-472    	; 0xd7a <__stack+0x51b>
     f52:	1a 89       	ldd	r17, Y+18	; 0x12
						}
						yOld=yRes;
						xOld=xRes;
					}
					//once he is up displays the sleep report
					LCD_clr();
     f54:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
					LCD_setCursor(0,0);
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
					LCD_writeStr("turned right");
     f60:	8c e6       	ldi	r24, 0x6C	; 108
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
					LCD_wriInt(turnedRight,0,13);
     f68:	4d e0       	ldi	r20, 0x0D	; 13
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	8a 85       	ldd	r24, Y+10	; 0x0a
     f72:	9b 85       	ldd	r25, Y+11	; 0x0b
     f74:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
					LCD_writeStr("x");
     f78:	88 eb       	ldi	r24, 0xB8	; 184
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
					LCD_setCursor(1,0);
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
					LCD_writeStr("turned left");
     f88:	8d e7       	ldi	r24, 0x7D	; 125
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
					LCD_wriInt(turnedLeft,1,13);
     f90:	4d e0       	ldi	r20, 0x0D	; 13
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	8e 85       	ldd	r24, Y+14	; 0x0e
     f9a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f9c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
					LCD_writeStr("x");
     fa0:	88 eb       	ldi	r24, 0xB8	; 184
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     fa8:	2f e5       	ldi	r18, 0x5F	; 95
     faa:	8a ee       	ldi	r24, 0xEA	; 234
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	21 50       	subi	r18, 0x01	; 1
     fb0:	80 40       	sbci	r24, 0x00	; 0
     fb2:	90 40       	sbci	r25, 0x00	; 0
     fb4:	e1 f7       	brne	.-8      	; 0xfae <__stack+0x74f>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <__stack+0x759>
     fb8:	00 00       	nop
					_delay_ms(300);
					LCD_clr();
     fba:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_clr>
					LCD_setCursor(0,0);
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
					LCD_writeStr("disturbed ");
     fc6:	8a eb       	ldi	r24, 0xBA	; 186
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
					LCD_wriInt(disturbed,0,10);
     fce:	4a e0       	ldi	r20, 0x0A	; 10
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	c2 01       	movw	r24, r4
     fd8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
					LCD_writeStr("x");
     fdc:	88 eb       	ldi	r24, 0xB8	; 184
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
     fe4:	2f e5       	ldi	r18, 0x5F	; 95
     fe6:	8a ee       	ldi	r24, 0xEA	; 234
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	21 50       	subi	r18, 0x01	; 1
     fec:	80 40       	sbci	r24, 0x00	; 0
     fee:	90 40       	sbci	r25, 0x00	; 0
     ff0:	e1 f7       	brne	.-8      	; 0xfea <__stack+0x78b>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <__stack+0x795>
     ff4:	00 00       	nop
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <__stack+0x79b>
     ff8:	1a 89       	ldd	r17, Y+18	; 0x12
				LCD_clr();
				_delay_ms(3);
				LCD_setCursor(0,0);
				
				char choice;
				while(IR_check()){ //as long as ir sensed you it displays options 
     ffa:	0e 94 14 01 	call	0x228	; 0x228 <IR_check>
     ffe:	81 11       	cpse	r24, r1
    1000:	9c cc       	rjmp	.-1736   	; 0x93a <__stack+0xdb>
    1002:	f4 cb       	rjmp	.-2072   	; 0x7ec <main+0x64>
				}
			}
		}
				
		else {
			LCD_cmd(0x08);	//if ir sensed no one it closes the lcd
    1004:	88 e0       	ldi	r24, 0x08	; 8
    1006:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
    100a:	83 ef       	ldi	r24, 0xF3	; 243
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <__stack+0x7af>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <__stack+0x7b5>
    1014:	00 00       	nop
    1016:	ea cb       	rjmp	.-2092   	; 0x7ec <main+0x64>
							
							
							 
							if(xRes!=xOld||yRes!=yOld){
								//display his new position according to bed
								DisplayCoordinates(xRes,yRes);
    1018:	c4 01       	movw	r24, r8
    101a:	0e 94 5b 00 	call	0xb6	; 0xb6 <DisplayCoordinates>
    101e:	33 cf       	rjmp	.-410    	; 0xe86 <__stack+0x627>

00001020 <__vector_1>:

//-----------------Interrupt Service Routines-------------------

// Interrupt service routine for heartbeat sensor
ISR(INT0_vect)
{
    1020:	1f 92       	push	r1
    1022:	0f 92       	push	r0
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	0f 92       	push	r0
    1028:	11 24       	eor	r1, r1
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
	pulseCount++;
    102e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <pulseCount>
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <pulseCount>
	
	if((bpm>100||bpm<60)&&(bpm!=0)){
    1038:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <bpm>
    103c:	94 ec       	ldi	r25, 0xC4	; 196
    103e:	98 0f       	add	r25, r24
    1040:	99 32       	cpi	r25, 0x29	; 41
    1042:	40 f0       	brcs	.+16     	; 0x1054 <__vector_1+0x34>
    1044:	88 23       	and	r24, r24
    1046:	31 f0       	breq	.+12     	; 0x1054 <__vector_1+0x34>
		danger++;
    1048:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <danger>
    104c:	8f 5f       	subi	r24, 0xFF	; 255
    104e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <danger>
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <__vector_1+0x38>
	}
	else
	danger=0;
    1054:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <danger>
	 
}
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <__vector_7>:

// Interrupt service routine for Timer1 compare match
ISR(TIMER1_COMPA_vect)
{
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
	 // Calculate BPM after the specified time interval
	 static uint8_t intervalCounter = 0;
	 intervalCounter++;
    1088:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <intervalCounter.2121>
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <intervalCounter.2121>
	 if (intervalCounter >= MEASURE_INTERVAL)
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	20 f0       	brcs	.+8      	; 0x109e <__vector_7+0x38>
	 {
		 calculateBPM();
    1096:	0e 94 04 01 	call	0x208	; 0x208 <calculateBPM>
		 intervalCounter = 0;
    109a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <intervalCounter.2121>
		 
	 }
	
	if(danger>2){ //critical heart rate for some time
    109e:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <danger>
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	10 f0       	brcs	.+4      	; 0x10aa <__vector_7+0x44>
		emergency();
    10a6:	0e 94 91 03 	call	0x722	; 0x722 <emergency>
		}
		
}
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <__vector_11>:

// Interrupt service routine for Timer0 Normal mode to count seconds,minutes,hours
ISR(TIMER0_OVF_vect){
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	8f 93       	push	r24
	// Increment seconds
	seconds++;
    10d8:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <seconds>
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
	
	// Check if a minute has passed
	if (seconds == 60) {
    10de:	8c 33       	cpi	r24, 0x3C	; 60
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <__vector_11+0x1c>
}

// Interrupt service routine for Timer0 Normal mode to count seconds,minutes,hours
ISR(TIMER0_OVF_vect){
	// Increment seconds
	seconds++;
    10e2:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <seconds>
    10e6:	11 c0       	rjmp	.+34     	; 0x110a <__vector_11+0x3e>
	
	// Check if a minute has passed
	if (seconds == 60) {
		seconds = 0;
    10e8:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <seconds>
		minutes++;
    10ec:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <minutes>
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
		
		// Check if an hour has passed
		if (minutes == 60) {
    10f2:	8c 33       	cpi	r24, 0x3C	; 60
    10f4:	19 f0       	breq	.+6      	; 0x10fc <__vector_11+0x30>
	seconds++;
	
	// Check if a minute has passed
	if (seconds == 60) {
		seconds = 0;
		minutes++;
    10f6:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <minutes>
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <__vector_11+0x3e>
		
		// Check if an hour has passed
		if (minutes == 60) {
			minutes = 0;
    10fc:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <minutes>
			hours++;
    1100:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <hours>
    1104:	8f 5f       	subi	r24, 0xFF	; 255
    1106:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <hours>
		}
	}
    110a:	8f 91       	pop	r24
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <servo_init>:

// Function to initialize the servo motor
void servo_init()
{
	//enabling servo and disabling dc motor 
	DDRA |= (1<<7)|(1<<6);
    1116:	8a b3       	in	r24, 0x1a	; 26
    1118:	80 6c       	ori	r24, 0xC0	; 192
    111a:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<6);
    111c:	de 9a       	sbi	0x1b, 6	; 27
	PORTA &= ~(1<<7);
    111e:	df 98       	cbi	0x1b, 7	; 27

	// Configure Timer2 in Fast PWM mode
	TCCR2 |= (1 << WGM20) | (1 << WGM21);
    1120:	85 b5       	in	r24, 0x25	; 37
    1122:	88 64       	ori	r24, 0x48	; 72
    1124:	85 bd       	out	0x25, r24	; 37

	// Set non-inverted mode for OC2
	TCCR2 |= (1 << COM21);
    1126:	85 b5       	in	r24, 0x25	; 37
    1128:	80 62       	ori	r24, 0x20	; 32
    112a:	85 bd       	out	0x25, r24	; 37

	// Set prescaler to 8
	TCCR2 |= (1 << CS21);
    112c:	85 b5       	in	r24, 0x25	; 37
    112e:	82 60       	ori	r24, 0x02	; 2
    1130:	85 bd       	out	0x25, r24	; 37

	// Set the initial position of the servo to 0 degrees
	OCR2 = 700;
    1132:	8c eb       	ldi	r24, 0xBC	; 188
    1134:	83 bd       	out	0x23, r24	; 35
    1136:	83 ed       	ldi	r24, 0xD3	; 211
    1138:	90 e3       	ldi	r25, 0x30	; 48
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <servo_init+0x24>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <servo_init+0x2a>
    1140:	00 00       	nop
    1142:	08 95       	ret

00001144 <stopWatch_Init>:
uint8_t seconds=0;
uint8_t minutes=0;
uint8_t hours=0;
void stopWatch_Init(void){
	
	 TCNT0 =0;
    1144:	12 be       	out	0x32, r1	; 50
	 TCCR0 &= ~((1<<WGM00)|(1<<WGM01)|(1<<COM00)|(1<<COM01)); //normal mode wit oc0 disconnected
    1146:	83 b7       	in	r24, 0x33	; 51
    1148:	87 78       	andi	r24, 0x87	; 135
    114a:	83 bf       	out	0x33, r24	; 51
	 // Enable Timer 0 overflow interrupt
	 TIMSK |= (1 << TOIE0);
    114c:	89 b7       	in	r24, 0x39	; 57
    114e:	81 60       	ori	r24, 0x01	; 1
    1150:	89 bf       	out	0x39, r24	; 57
	 
	 // Enable global interrupts
	 sei();
    1152:	78 94       	sei
    1154:	08 95       	ret

00001156 <start_stopWatch>:



void start_stopWatch(void){
	//setting 1024 prescalar
	TCCR0 |= (1<<CS00)|(1<<CS02);
    1156:	83 b7       	in	r24, 0x33	; 51
    1158:	85 60       	ori	r24, 0x05	; 5
    115a:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<CS01);
    115c:	83 b7       	in	r24, 0x33	; 51
    115e:	8d 7f       	andi	r24, 0xFD	; 253
    1160:	83 bf       	out	0x33, r24	; 51
    1162:	08 95       	ret

00001164 <stop_stopWatch>:
}

void stop_stopWatch(void){
	TCCR0 &= ~((1<<CS01)|(1<<CS00)|(1<<CS02)); //turn off counter
    1164:	83 b7       	in	r24, 0x33	; 51
    1166:	88 7f       	andi	r24, 0xF8	; 248
    1168:	83 bf       	out	0x33, r24	; 51
    116a:	08 95       	ret

0000116c <reset_stopWatch>:
}

void reset_stopWatch(void){
	seconds=0;
    116c:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <seconds>
	minutes=0;
    1170:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <minutes>
	hours=0;
    1174:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <hours>
	TCCR0 |= (1<<CS00)|(1<<CS02);
    1178:	83 b7       	in	r24, 0x33	; 51
    117a:	85 60       	ori	r24, 0x05	; 5
    117c:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<CS01); //turn ON counter
    117e:	83 b7       	in	r24, 0x33	; 51
    1180:	8d 7f       	andi	r24, 0xFD	; 253
    1182:	83 bf       	out	0x33, r24	; 51
    1184:	08 95       	ret

00001186 <displayTime>:
}

void displayTime(void){
	LCD_setCursor(0,0);
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
	LCD_wriInt(hours,0,0);
    118e:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <hours>
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
	LCD_writeStr(":");
    11a0:	86 e6       	ldi	r24, 0x66	; 102
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
	LCD_wriInt(minutes,0,3);
    11a8:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <minutes>
    11ac:	43 e0       	ldi	r20, 0x03	; 3
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
	LCD_writeStr(":");
    11ba:	86 e6       	ldi	r24, 0x66	; 102
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
	LCD_wriInt(seconds,0,6);
    11c2:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <seconds>
    11c6:	46 e0       	ldi	r20, 0x06	; 6
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_wriInt>
    11d4:	08 95       	ret

000011d6 <Temperature_Init>:
#include "temperature.h"
void Temperature_Init(void){
    DDRA &= ~(1<<0);
    11d6:	d0 98       	cbi	0x1a, 0	; 26
    ADCSRA = 0x87; //enabling adc and setting prescalar to 128
    11d8:	87 e8       	ldi	r24, 0x87	; 135
    11da:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0xE0; //Internal 2.56V Voltage Reference ,  left adjust the result , selecting ADC0
    11dc:	80 ee       	ldi	r24, 0xE0	; 224
    11de:	87 b9       	out	0x07, r24	; 7
    11e0:	08 95       	ret

000011e2 <convertNdisplayTemp>:
}
void convertNdisplayTemp(unsigned char value){ //convert int to char 
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	d8 2f       	mov	r29, r24
	//converting int to char
	unsigned char d1,d2;
	d1=value/10;
	d2=value%10; 
	LCD_cmd(0x8D); //move cursor to after Temperature= " " 
    11e8:	8d e8       	ldi	r24, 0x8D	; 141
    11ea:	0e 94 09 02 	call	0x412	; 0x412 <LCD_cmd>
	ADMUX = 0xE0; //Internal 2.56V Voltage Reference ,  left adjust the result , selecting ADC0
}
void convertNdisplayTemp(unsigned char value){ //convert int to char 
	//converting int to char
	unsigned char d1,d2;
	d1=value/10;
    11ee:	cd ec       	ldi	r28, 0xCD	; 205
    11f0:	dc 9f       	mul	r29, r28
    11f2:	c1 2d       	mov	r28, r1
    11f4:	11 24       	eor	r1, r1
    11f6:	c6 95       	lsr	r28
    11f8:	c6 95       	lsr	r28
    11fa:	c6 95       	lsr	r28
	d2=value%10; 
	LCD_cmd(0x8D); //move cursor to after Temperature= " " 
	LCD_data(d1+0x30); //to display the first temperature digit as char (Ascii of 3 is 33, ascii of 5 is 35)
    11fc:	80 e3       	ldi	r24, 0x30	; 48
    11fe:	8c 0f       	add	r24, r28
    1200:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_data>
}
void convertNdisplayTemp(unsigned char value){ //convert int to char 
	//converting int to char
	unsigned char d1,d2;
	d1=value/10;
	d2=value%10; 
    1204:	cc 0f       	add	r28, r28
    1206:	8c 2f       	mov	r24, r28
    1208:	88 0f       	add	r24, r24
    120a:	88 0f       	add	r24, r24
    120c:	c8 0f       	add	r28, r24
    120e:	8d 2f       	mov	r24, r29
    1210:	8c 1b       	sub	r24, r28
	LCD_cmd(0x8D); //move cursor to after Temperature= " " 
	LCD_data(d1+0x30); //to display the first temperature digit as char (Ascii of 3 is 33, ascii of 5 is 35)
	LCD_data(d2+0x30); //to display the second temperature digit as char (Ascii of 3 is 33, ascii of 5 is 35)
    1212:	80 5d       	subi	r24, 0xD0	; 208
    1214:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_data>
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <Temp_reading>:
void Temp_reading(void){
    121e:	cf 93       	push	r28
		ADCSRA |= (1<<6); //start conversion
    1220:	36 9a       	sbi	0x06, 6	; 6
		while(ADCSRA & (1<<ADIF)); //wait until finishing conversion
    1222:	34 99       	sbic	0x06, 4	; 6
    1224:	fe cf       	rjmp	.-4      	; 0x1222 <Temp_reading+0x4>
		int data = ADCH;
    1226:	c5 b1       	in	r28, 0x05	; 5
		convertNdisplayTemp (data);
    1228:	8c 2f       	mov	r24, r28
    122a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <convertNdisplayTemp>
	LCD_data(d2+0x30); //to display the second temperature digit as char (Ascii of 3 is 33, ascii of 5 is 35)
}
void Temp_reading(void){
		ADCSRA |= (1<<6); //start conversion
		while(ADCSRA & (1<<ADIF)); //wait until finishing conversion
		int data = ADCH;
    122e:	8c 2f       	mov	r24, r28
    1230:	90 e0       	ldi	r25, 0x00	; 0
		convertNdisplayTemp (data);
		if((data>35)){
    1232:	84 97       	sbiw	r24, 0x24	; 36
    1234:	6c f0       	brlt	.+26     	; 0x1250 <Temp_reading+0x32>
			LCD_clrScnd();
    1236:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
			LCD_setCursor(1,0);
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
			LCD_writeStr("Fan ON/0 to Exit");
    1242:	85 ec       	ldi	r24, 0xC5	; 197
    1244:	92 e0       	ldi	r25, 0x02	; 2
    1246:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
			Fan_ON(); //fan is on once temp exceeds 35 degree celsius and this function is in Dcmotor.c 
    124a:	0e 94 ae 00 	call	0x15c	; 0x15c <Fan_ON>
    124e:	0a c0       	rjmp	.+20     	; 0x1264 <Temp_reading+0x46>
		} 
		else {
			
			LCD_clrScnd();
    1250:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_clrScnd>
			LCD_setCursor(1,0);
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_setCursor>
			LCD_writeStr("FanOFF/0 to Exit");
    125c:	86 ed       	ldi	r24, 0xD6	; 214
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_writeStr>
		}
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <__subsf3>:
    1268:	50 58       	subi	r21, 0x80	; 128

0000126a <__addsf3>:
    126a:	bb 27       	eor	r27, r27
    126c:	aa 27       	eor	r26, r26
    126e:	0e 94 4c 09 	call	0x1298	; 0x1298 <__addsf3x>
    1272:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__fp_round>
    1276:	0e 94 1d 0a 	call	0x143a	; 0x143a <__fp_pscA>
    127a:	38 f0       	brcs	.+14     	; 0x128a <__addsf3+0x20>
    127c:	0e 94 24 0a 	call	0x1448	; 0x1448 <__fp_pscB>
    1280:	20 f0       	brcs	.+8      	; 0x128a <__addsf3+0x20>
    1282:	39 f4       	brne	.+14     	; 0x1292 <__addsf3+0x28>
    1284:	9f 3f       	cpi	r25, 0xFF	; 255
    1286:	19 f4       	brne	.+6      	; 0x128e <__addsf3+0x24>
    1288:	26 f4       	brtc	.+8      	; 0x1292 <__addsf3+0x28>
    128a:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_nan>
    128e:	0e f4       	brtc	.+2      	; 0x1292 <__addsf3+0x28>
    1290:	e0 95       	com	r30
    1292:	e7 fb       	bst	r30, 7
    1294:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_inf>

00001298 <__addsf3x>:
    1298:	e9 2f       	mov	r30, r25
    129a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fp_split3>
    129e:	58 f3       	brcs	.-42     	; 0x1276 <__addsf3+0xc>
    12a0:	ba 17       	cp	r27, r26
    12a2:	62 07       	cpc	r22, r18
    12a4:	73 07       	cpc	r23, r19
    12a6:	84 07       	cpc	r24, r20
    12a8:	95 07       	cpc	r25, r21
    12aa:	20 f0       	brcs	.+8      	; 0x12b4 <__addsf3x+0x1c>
    12ac:	79 f4       	brne	.+30     	; 0x12cc <__addsf3x+0x34>
    12ae:	a6 f5       	brtc	.+104    	; 0x1318 <__addsf3x+0x80>
    12b0:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_zero>
    12b4:	0e f4       	brtc	.+2      	; 0x12b8 <__addsf3x+0x20>
    12b6:	e0 95       	com	r30
    12b8:	0b 2e       	mov	r0, r27
    12ba:	ba 2f       	mov	r27, r26
    12bc:	a0 2d       	mov	r26, r0
    12be:	0b 01       	movw	r0, r22
    12c0:	b9 01       	movw	r22, r18
    12c2:	90 01       	movw	r18, r0
    12c4:	0c 01       	movw	r0, r24
    12c6:	ca 01       	movw	r24, r20
    12c8:	a0 01       	movw	r20, r0
    12ca:	11 24       	eor	r1, r1
    12cc:	ff 27       	eor	r31, r31
    12ce:	59 1b       	sub	r21, r25
    12d0:	99 f0       	breq	.+38     	; 0x12f8 <__addsf3x+0x60>
    12d2:	59 3f       	cpi	r21, 0xF9	; 249
    12d4:	50 f4       	brcc	.+20     	; 0x12ea <__addsf3x+0x52>
    12d6:	50 3e       	cpi	r21, 0xE0	; 224
    12d8:	68 f1       	brcs	.+90     	; 0x1334 <__addsf3x+0x9c>
    12da:	1a 16       	cp	r1, r26
    12dc:	f0 40       	sbci	r31, 0x00	; 0
    12de:	a2 2f       	mov	r26, r18
    12e0:	23 2f       	mov	r18, r19
    12e2:	34 2f       	mov	r19, r20
    12e4:	44 27       	eor	r20, r20
    12e6:	58 5f       	subi	r21, 0xF8	; 248
    12e8:	f3 cf       	rjmp	.-26     	; 0x12d0 <__addsf3x+0x38>
    12ea:	46 95       	lsr	r20
    12ec:	37 95       	ror	r19
    12ee:	27 95       	ror	r18
    12f0:	a7 95       	ror	r26
    12f2:	f0 40       	sbci	r31, 0x00	; 0
    12f4:	53 95       	inc	r21
    12f6:	c9 f7       	brne	.-14     	; 0x12ea <__addsf3x+0x52>
    12f8:	7e f4       	brtc	.+30     	; 0x1318 <__addsf3x+0x80>
    12fa:	1f 16       	cp	r1, r31
    12fc:	ba 0b       	sbc	r27, r26
    12fe:	62 0b       	sbc	r22, r18
    1300:	73 0b       	sbc	r23, r19
    1302:	84 0b       	sbc	r24, r20
    1304:	ba f0       	brmi	.+46     	; 0x1334 <__addsf3x+0x9c>
    1306:	91 50       	subi	r25, 0x01	; 1
    1308:	a1 f0       	breq	.+40     	; 0x1332 <__addsf3x+0x9a>
    130a:	ff 0f       	add	r31, r31
    130c:	bb 1f       	adc	r27, r27
    130e:	66 1f       	adc	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	88 1f       	adc	r24, r24
    1314:	c2 f7       	brpl	.-16     	; 0x1306 <__addsf3x+0x6e>
    1316:	0e c0       	rjmp	.+28     	; 0x1334 <__addsf3x+0x9c>
    1318:	ba 0f       	add	r27, r26
    131a:	62 1f       	adc	r22, r18
    131c:	73 1f       	adc	r23, r19
    131e:	84 1f       	adc	r24, r20
    1320:	48 f4       	brcc	.+18     	; 0x1334 <__addsf3x+0x9c>
    1322:	87 95       	ror	r24
    1324:	77 95       	ror	r23
    1326:	67 95       	ror	r22
    1328:	b7 95       	ror	r27
    132a:	f7 95       	ror	r31
    132c:	9e 3f       	cpi	r25, 0xFE	; 254
    132e:	08 f0       	brcs	.+2      	; 0x1332 <__addsf3x+0x9a>
    1330:	b0 cf       	rjmp	.-160    	; 0x1292 <__addsf3+0x28>
    1332:	93 95       	inc	r25
    1334:	88 0f       	add	r24, r24
    1336:	08 f0       	brcs	.+2      	; 0x133a <__addsf3x+0xa2>
    1338:	99 27       	eor	r25, r25
    133a:	ee 0f       	add	r30, r30
    133c:	97 95       	ror	r25
    133e:	87 95       	ror	r24
    1340:	08 95       	ret

00001342 <__fixsfsi>:
    1342:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fixunssfsi>
    1346:	68 94       	set
    1348:	b1 11       	cpse	r27, r1
    134a:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_szero>
    134e:	08 95       	ret

00001350 <__fixunssfsi>:
    1350:	0e 94 44 0a 	call	0x1488	; 0x1488 <__fp_splitA>
    1354:	88 f0       	brcs	.+34     	; 0x1378 <__fixunssfsi+0x28>
    1356:	9f 57       	subi	r25, 0x7F	; 127
    1358:	98 f0       	brcs	.+38     	; 0x1380 <__fixunssfsi+0x30>
    135a:	b9 2f       	mov	r27, r25
    135c:	99 27       	eor	r25, r25
    135e:	b7 51       	subi	r27, 0x17	; 23
    1360:	b0 f0       	brcs	.+44     	; 0x138e <__fixunssfsi+0x3e>
    1362:	e1 f0       	breq	.+56     	; 0x139c <__fixunssfsi+0x4c>
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	88 1f       	adc	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	1a f0       	brmi	.+6      	; 0x1374 <__fixunssfsi+0x24>
    136e:	ba 95       	dec	r27
    1370:	c9 f7       	brne	.-14     	; 0x1364 <__fixunssfsi+0x14>
    1372:	14 c0       	rjmp	.+40     	; 0x139c <__fixunssfsi+0x4c>
    1374:	b1 30       	cpi	r27, 0x01	; 1
    1376:	91 f0       	breq	.+36     	; 0x139c <__fixunssfsi+0x4c>
    1378:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <__fp_zero>
    137c:	b1 e0       	ldi	r27, 0x01	; 1
    137e:	08 95       	ret
    1380:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_zero>
    1384:	67 2f       	mov	r22, r23
    1386:	78 2f       	mov	r23, r24
    1388:	88 27       	eor	r24, r24
    138a:	b8 5f       	subi	r27, 0xF8	; 248
    138c:	39 f0       	breq	.+14     	; 0x139c <__fixunssfsi+0x4c>
    138e:	b9 3f       	cpi	r27, 0xF9	; 249
    1390:	cc f3       	brlt	.-14     	; 0x1384 <__fixunssfsi+0x34>
    1392:	86 95       	lsr	r24
    1394:	77 95       	ror	r23
    1396:	67 95       	ror	r22
    1398:	b3 95       	inc	r27
    139a:	d9 f7       	brne	.-10     	; 0x1392 <__fixunssfsi+0x42>
    139c:	3e f4       	brtc	.+14     	; 0x13ac <__fixunssfsi+0x5c>
    139e:	90 95       	com	r25
    13a0:	80 95       	com	r24
    13a2:	70 95       	com	r23
    13a4:	61 95       	neg	r22
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	08 95       	ret

000013ae <__floatunsisf>:
    13ae:	e8 94       	clt
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <__floatsisf+0x12>

000013b2 <__floatsisf>:
    13b2:	97 fb       	bst	r25, 7
    13b4:	3e f4       	brtc	.+14     	; 0x13c4 <__floatsisf+0x12>
    13b6:	90 95       	com	r25
    13b8:	80 95       	com	r24
    13ba:	70 95       	com	r23
    13bc:	61 95       	neg	r22
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	8f 4f       	sbci	r24, 0xFF	; 255
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	99 23       	and	r25, r25
    13c6:	a9 f0       	breq	.+42     	; 0x13f2 <__floatsisf+0x40>
    13c8:	f9 2f       	mov	r31, r25
    13ca:	96 e9       	ldi	r25, 0x96	; 150
    13cc:	bb 27       	eor	r27, r27
    13ce:	93 95       	inc	r25
    13d0:	f6 95       	lsr	r31
    13d2:	87 95       	ror	r24
    13d4:	77 95       	ror	r23
    13d6:	67 95       	ror	r22
    13d8:	b7 95       	ror	r27
    13da:	f1 11       	cpse	r31, r1
    13dc:	f8 cf       	rjmp	.-16     	; 0x13ce <__floatsisf+0x1c>
    13de:	fa f4       	brpl	.+62     	; 0x141e <__floatsisf+0x6c>
    13e0:	bb 0f       	add	r27, r27
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <__floatsisf+0x36>
    13e4:	60 ff       	sbrs	r22, 0
    13e6:	1b c0       	rjmp	.+54     	; 0x141e <__floatsisf+0x6c>
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	8f 4f       	sbci	r24, 0xFF	; 255
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	16 c0       	rjmp	.+44     	; 0x141e <__floatsisf+0x6c>
    13f2:	88 23       	and	r24, r24
    13f4:	11 f0       	breq	.+4      	; 0x13fa <__floatsisf+0x48>
    13f6:	96 e9       	ldi	r25, 0x96	; 150
    13f8:	11 c0       	rjmp	.+34     	; 0x141c <__floatsisf+0x6a>
    13fa:	77 23       	and	r23, r23
    13fc:	21 f0       	breq	.+8      	; 0x1406 <__floatsisf+0x54>
    13fe:	9e e8       	ldi	r25, 0x8E	; 142
    1400:	87 2f       	mov	r24, r23
    1402:	76 2f       	mov	r23, r22
    1404:	05 c0       	rjmp	.+10     	; 0x1410 <__floatsisf+0x5e>
    1406:	66 23       	and	r22, r22
    1408:	71 f0       	breq	.+28     	; 0x1426 <__floatsisf+0x74>
    140a:	96 e8       	ldi	r25, 0x86	; 134
    140c:	86 2f       	mov	r24, r22
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	2a f0       	brmi	.+10     	; 0x141e <__floatsisf+0x6c>
    1414:	9a 95       	dec	r25
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	da f7       	brpl	.-10     	; 0x1414 <__floatsisf+0x62>
    141e:	88 0f       	add	r24, r24
    1420:	96 95       	lsr	r25
    1422:	87 95       	ror	r24
    1424:	97 f9       	bld	r25, 7
    1426:	08 95       	ret

00001428 <__fp_inf>:
    1428:	97 f9       	bld	r25, 7
    142a:	9f 67       	ori	r25, 0x7F	; 127
    142c:	80 e8       	ldi	r24, 0x80	; 128
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	08 95       	ret

00001434 <__fp_nan>:
    1434:	9f ef       	ldi	r25, 0xFF	; 255
    1436:	80 ec       	ldi	r24, 0xC0	; 192
    1438:	08 95       	ret

0000143a <__fp_pscA>:
    143a:	00 24       	eor	r0, r0
    143c:	0a 94       	dec	r0
    143e:	16 16       	cp	r1, r22
    1440:	17 06       	cpc	r1, r23
    1442:	18 06       	cpc	r1, r24
    1444:	09 06       	cpc	r0, r25
    1446:	08 95       	ret

00001448 <__fp_pscB>:
    1448:	00 24       	eor	r0, r0
    144a:	0a 94       	dec	r0
    144c:	12 16       	cp	r1, r18
    144e:	13 06       	cpc	r1, r19
    1450:	14 06       	cpc	r1, r20
    1452:	05 06       	cpc	r0, r21
    1454:	08 95       	ret

00001456 <__fp_round>:
    1456:	09 2e       	mov	r0, r25
    1458:	03 94       	inc	r0
    145a:	00 0c       	add	r0, r0
    145c:	11 f4       	brne	.+4      	; 0x1462 <__fp_round+0xc>
    145e:	88 23       	and	r24, r24
    1460:	52 f0       	brmi	.+20     	; 0x1476 <__fp_round+0x20>
    1462:	bb 0f       	add	r27, r27
    1464:	40 f4       	brcc	.+16     	; 0x1476 <__fp_round+0x20>
    1466:	bf 2b       	or	r27, r31
    1468:	11 f4       	brne	.+4      	; 0x146e <__fp_round+0x18>
    146a:	60 ff       	sbrs	r22, 0
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <__fp_round+0x20>
    146e:	6f 5f       	subi	r22, 0xFF	; 255
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	8f 4f       	sbci	r24, 0xFF	; 255
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	08 95       	ret

00001478 <__fp_split3>:
    1478:	57 fd       	sbrc	r21, 7
    147a:	90 58       	subi	r25, 0x80	; 128
    147c:	44 0f       	add	r20, r20
    147e:	55 1f       	adc	r21, r21
    1480:	59 f0       	breq	.+22     	; 0x1498 <__fp_splitA+0x10>
    1482:	5f 3f       	cpi	r21, 0xFF	; 255
    1484:	71 f0       	breq	.+28     	; 0x14a2 <__fp_splitA+0x1a>
    1486:	47 95       	ror	r20

00001488 <__fp_splitA>:
    1488:	88 0f       	add	r24, r24
    148a:	97 fb       	bst	r25, 7
    148c:	99 1f       	adc	r25, r25
    148e:	61 f0       	breq	.+24     	; 0x14a8 <__fp_splitA+0x20>
    1490:	9f 3f       	cpi	r25, 0xFF	; 255
    1492:	79 f0       	breq	.+30     	; 0x14b2 <__fp_splitA+0x2a>
    1494:	87 95       	ror	r24
    1496:	08 95       	ret
    1498:	12 16       	cp	r1, r18
    149a:	13 06       	cpc	r1, r19
    149c:	14 06       	cpc	r1, r20
    149e:	55 1f       	adc	r21, r21
    14a0:	f2 cf       	rjmp	.-28     	; 0x1486 <__fp_split3+0xe>
    14a2:	46 95       	lsr	r20
    14a4:	f1 df       	rcall	.-30     	; 0x1488 <__fp_splitA>
    14a6:	08 c0       	rjmp	.+16     	; 0x14b8 <__fp_splitA+0x30>
    14a8:	16 16       	cp	r1, r22
    14aa:	17 06       	cpc	r1, r23
    14ac:	18 06       	cpc	r1, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	f1 cf       	rjmp	.-30     	; 0x1494 <__fp_splitA+0xc>
    14b2:	86 95       	lsr	r24
    14b4:	71 05       	cpc	r23, r1
    14b6:	61 05       	cpc	r22, r1
    14b8:	08 94       	sec
    14ba:	08 95       	ret

000014bc <__fp_zero>:
    14bc:	e8 94       	clt

000014be <__fp_szero>:
    14be:	bb 27       	eor	r27, r27
    14c0:	66 27       	eor	r22, r22
    14c2:	77 27       	eor	r23, r23
    14c4:	cb 01       	movw	r24, r22
    14c6:	97 f9       	bld	r25, 7
    14c8:	08 95       	ret

000014ca <__mulsf3>:
    14ca:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__mulsf3x>
    14ce:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__fp_round>
    14d2:	0e 94 1d 0a 	call	0x143a	; 0x143a <__fp_pscA>
    14d6:	38 f0       	brcs	.+14     	; 0x14e6 <__mulsf3+0x1c>
    14d8:	0e 94 24 0a 	call	0x1448	; 0x1448 <__fp_pscB>
    14dc:	20 f0       	brcs	.+8      	; 0x14e6 <__mulsf3+0x1c>
    14de:	95 23       	and	r25, r21
    14e0:	11 f0       	breq	.+4      	; 0x14e6 <__mulsf3+0x1c>
    14e2:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_inf>
    14e6:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_nan>
    14ea:	11 24       	eor	r1, r1
    14ec:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_szero>

000014f0 <__mulsf3x>:
    14f0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fp_split3>
    14f4:	70 f3       	brcs	.-36     	; 0x14d2 <__mulsf3+0x8>

000014f6 <__mulsf3_pse>:
    14f6:	95 9f       	mul	r25, r21
    14f8:	c1 f3       	breq	.-16     	; 0x14ea <__mulsf3+0x20>
    14fa:	95 0f       	add	r25, r21
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	55 1f       	adc	r21, r21
    1500:	62 9f       	mul	r22, r18
    1502:	f0 01       	movw	r30, r0
    1504:	72 9f       	mul	r23, r18
    1506:	bb 27       	eor	r27, r27
    1508:	f0 0d       	add	r31, r0
    150a:	b1 1d       	adc	r27, r1
    150c:	63 9f       	mul	r22, r19
    150e:	aa 27       	eor	r26, r26
    1510:	f0 0d       	add	r31, r0
    1512:	b1 1d       	adc	r27, r1
    1514:	aa 1f       	adc	r26, r26
    1516:	64 9f       	mul	r22, r20
    1518:	66 27       	eor	r22, r22
    151a:	b0 0d       	add	r27, r0
    151c:	a1 1d       	adc	r26, r1
    151e:	66 1f       	adc	r22, r22
    1520:	82 9f       	mul	r24, r18
    1522:	22 27       	eor	r18, r18
    1524:	b0 0d       	add	r27, r0
    1526:	a1 1d       	adc	r26, r1
    1528:	62 1f       	adc	r22, r18
    152a:	73 9f       	mul	r23, r19
    152c:	b0 0d       	add	r27, r0
    152e:	a1 1d       	adc	r26, r1
    1530:	62 1f       	adc	r22, r18
    1532:	83 9f       	mul	r24, r19
    1534:	a0 0d       	add	r26, r0
    1536:	61 1d       	adc	r22, r1
    1538:	22 1f       	adc	r18, r18
    153a:	74 9f       	mul	r23, r20
    153c:	33 27       	eor	r19, r19
    153e:	a0 0d       	add	r26, r0
    1540:	61 1d       	adc	r22, r1
    1542:	23 1f       	adc	r18, r19
    1544:	84 9f       	mul	r24, r20
    1546:	60 0d       	add	r22, r0
    1548:	21 1d       	adc	r18, r1
    154a:	82 2f       	mov	r24, r18
    154c:	76 2f       	mov	r23, r22
    154e:	6a 2f       	mov	r22, r26
    1550:	11 24       	eor	r1, r1
    1552:	9f 57       	subi	r25, 0x7F	; 127
    1554:	50 40       	sbci	r21, 0x00	; 0
    1556:	9a f0       	brmi	.+38     	; 0x157e <__mulsf3_pse+0x88>
    1558:	f1 f0       	breq	.+60     	; 0x1596 <__mulsf3_pse+0xa0>
    155a:	88 23       	and	r24, r24
    155c:	4a f0       	brmi	.+18     	; 0x1570 <__mulsf3_pse+0x7a>
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	bb 1f       	adc	r27, r27
    1564:	66 1f       	adc	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	88 1f       	adc	r24, r24
    156a:	91 50       	subi	r25, 0x01	; 1
    156c:	50 40       	sbci	r21, 0x00	; 0
    156e:	a9 f7       	brne	.-22     	; 0x155a <__mulsf3_pse+0x64>
    1570:	9e 3f       	cpi	r25, 0xFE	; 254
    1572:	51 05       	cpc	r21, r1
    1574:	80 f0       	brcs	.+32     	; 0x1596 <__mulsf3_pse+0xa0>
    1576:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_inf>
    157a:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_szero>
    157e:	5f 3f       	cpi	r21, 0xFF	; 255
    1580:	e4 f3       	brlt	.-8      	; 0x157a <__mulsf3_pse+0x84>
    1582:	98 3e       	cpi	r25, 0xE8	; 232
    1584:	d4 f3       	brlt	.-12     	; 0x157a <__mulsf3_pse+0x84>
    1586:	86 95       	lsr	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b7 95       	ror	r27
    158e:	f7 95       	ror	r31
    1590:	e7 95       	ror	r30
    1592:	9f 5f       	subi	r25, 0xFF	; 255
    1594:	c1 f7       	brne	.-16     	; 0x1586 <__mulsf3_pse+0x90>
    1596:	fe 2b       	or	r31, r30
    1598:	88 0f       	add	r24, r24
    159a:	91 1d       	adc	r25, r1
    159c:	96 95       	lsr	r25
    159e:	87 95       	ror	r24
    15a0:	97 f9       	bld	r25, 7
    15a2:	08 95       	ret

000015a4 <round>:
    15a4:	0e 94 44 0a 	call	0x1488	; 0x1488 <__fp_splitA>
    15a8:	e8 f0       	brcs	.+58     	; 0x15e4 <round+0x40>
    15aa:	9e 37       	cpi	r25, 0x7E	; 126
    15ac:	e8 f0       	brcs	.+58     	; 0x15e8 <round+0x44>
    15ae:	96 39       	cpi	r25, 0x96	; 150
    15b0:	b8 f4       	brcc	.+46     	; 0x15e0 <round+0x3c>
    15b2:	9e 38       	cpi	r25, 0x8E	; 142
    15b4:	48 f4       	brcc	.+18     	; 0x15c8 <round+0x24>
    15b6:	67 2f       	mov	r22, r23
    15b8:	78 2f       	mov	r23, r24
    15ba:	88 27       	eor	r24, r24
    15bc:	98 5f       	subi	r25, 0xF8	; 248
    15be:	f9 cf       	rjmp	.-14     	; 0x15b2 <round+0xe>
    15c0:	86 95       	lsr	r24
    15c2:	77 95       	ror	r23
    15c4:	67 95       	ror	r22
    15c6:	93 95       	inc	r25
    15c8:	95 39       	cpi	r25, 0x95	; 149
    15ca:	d0 f3       	brcs	.-12     	; 0x15c0 <round+0x1c>
    15cc:	b6 2f       	mov	r27, r22
    15ce:	b1 70       	andi	r27, 0x01	; 1
    15d0:	6b 0f       	add	r22, r27
    15d2:	71 1d       	adc	r23, r1
    15d4:	81 1d       	adc	r24, r1
    15d6:	20 f4       	brcc	.+8      	; 0x15e0 <round+0x3c>
    15d8:	87 95       	ror	r24
    15da:	77 95       	ror	r23
    15dc:	67 95       	ror	r22
    15de:	93 95       	inc	r25
    15e0:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__fp_mintl>
    15e4:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_mpack>
    15e8:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_szero>
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <round+0x50>
    15ee:	16 f4       	brtc	.+4      	; 0x15f4 <round+0x50>
    15f0:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_nan>
    15f4:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_mpack>

000015f8 <sqrt>:
    15f8:	0e 94 44 0a 	call	0x1488	; 0x1488 <__fp_splitA>
    15fc:	b8 f3       	brcs	.-18     	; 0x15ec <round+0x48>
    15fe:	99 23       	and	r25, r25
    1600:	c9 f3       	breq	.-14     	; 0x15f4 <round+0x50>
    1602:	b6 f3       	brts	.-20     	; 0x15f0 <round+0x4c>
    1604:	9f 57       	subi	r25, 0x7F	; 127
    1606:	55 0b       	sbc	r21, r21
    1608:	87 ff       	sbrs	r24, 7
    160a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__fp_norm2>
    160e:	00 24       	eor	r0, r0
    1610:	a0 e6       	ldi	r26, 0x60	; 96
    1612:	40 ea       	ldi	r20, 0xA0	; 160
    1614:	90 01       	movw	r18, r0
    1616:	80 58       	subi	r24, 0x80	; 128
    1618:	56 95       	lsr	r21
    161a:	97 95       	ror	r25
    161c:	28 f4       	brcc	.+10     	; 0x1628 <sqrt+0x30>
    161e:	80 5c       	subi	r24, 0xC0	; 192
    1620:	66 0f       	add	r22, r22
    1622:	77 1f       	adc	r23, r23
    1624:	88 1f       	adc	r24, r24
    1626:	20 f0       	brcs	.+8      	; 0x1630 <sqrt+0x38>
    1628:	26 17       	cp	r18, r22
    162a:	37 07       	cpc	r19, r23
    162c:	48 07       	cpc	r20, r24
    162e:	30 f4       	brcc	.+12     	; 0x163c <sqrt+0x44>
    1630:	62 1b       	sub	r22, r18
    1632:	73 0b       	sbc	r23, r19
    1634:	84 0b       	sbc	r24, r20
    1636:	20 29       	or	r18, r0
    1638:	31 29       	or	r19, r1
    163a:	4a 2b       	or	r20, r26
    163c:	a6 95       	lsr	r26
    163e:	17 94       	ror	r1
    1640:	07 94       	ror	r0
    1642:	20 25       	eor	r18, r0
    1644:	31 25       	eor	r19, r1
    1646:	4a 27       	eor	r20, r26
    1648:	58 f7       	brcc	.-42     	; 0x1620 <sqrt+0x28>
    164a:	66 0f       	add	r22, r22
    164c:	77 1f       	adc	r23, r23
    164e:	88 1f       	adc	r24, r24
    1650:	20 f0       	brcs	.+8      	; 0x165a <sqrt+0x62>
    1652:	26 17       	cp	r18, r22
    1654:	37 07       	cpc	r19, r23
    1656:	48 07       	cpc	r20, r24
    1658:	30 f4       	brcc	.+12     	; 0x1666 <sqrt+0x6e>
    165a:	62 0b       	sbc	r22, r18
    165c:	73 0b       	sbc	r23, r19
    165e:	84 0b       	sbc	r24, r20
    1660:	20 0d       	add	r18, r0
    1662:	31 1d       	adc	r19, r1
    1664:	41 1d       	adc	r20, r1
    1666:	a0 95       	com	r26
    1668:	81 f7       	brne	.-32     	; 0x164a <sqrt+0x52>
    166a:	b9 01       	movw	r22, r18
    166c:	84 2f       	mov	r24, r20
    166e:	91 58       	subi	r25, 0x81	; 129
    1670:	88 0f       	add	r24, r24
    1672:	96 95       	lsr	r25
    1674:	87 95       	ror	r24
    1676:	08 95       	ret

00001678 <__fp_mintl>:
    1678:	88 23       	and	r24, r24
    167a:	71 f4       	brne	.+28     	; 0x1698 <__fp_mintl+0x20>
    167c:	77 23       	and	r23, r23
    167e:	21 f0       	breq	.+8      	; 0x1688 <__fp_mintl+0x10>
    1680:	98 50       	subi	r25, 0x08	; 8
    1682:	87 2b       	or	r24, r23
    1684:	76 2f       	mov	r23, r22
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <__fp_mintl+0x1e>
    1688:	66 23       	and	r22, r22
    168a:	11 f4       	brne	.+4      	; 0x1690 <__fp_mintl+0x18>
    168c:	99 27       	eor	r25, r25
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <__fp_mintl+0x32>
    1690:	90 51       	subi	r25, 0x10	; 16
    1692:	86 2b       	or	r24, r22
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	2a f0       	brmi	.+10     	; 0x16a4 <__fp_mintl+0x2c>
    169a:	9a 95       	dec	r25
    169c:	66 0f       	add	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	88 1f       	adc	r24, r24
    16a2:	da f7       	brpl	.-10     	; 0x169a <__fp_mintl+0x22>
    16a4:	88 0f       	add	r24, r24
    16a6:	96 95       	lsr	r25
    16a8:	87 95       	ror	r24
    16aa:	97 f9       	bld	r25, 7
    16ac:	08 95       	ret

000016ae <__fp_mpack>:
    16ae:	9f 3f       	cpi	r25, 0xFF	; 255
    16b0:	31 f0       	breq	.+12     	; 0x16be <__fp_mpack_finite+0xc>

000016b2 <__fp_mpack_finite>:
    16b2:	91 50       	subi	r25, 0x01	; 1
    16b4:	20 f4       	brcc	.+8      	; 0x16be <__fp_mpack_finite+0xc>
    16b6:	87 95       	ror	r24
    16b8:	77 95       	ror	r23
    16ba:	67 95       	ror	r22
    16bc:	b7 95       	ror	r27
    16be:	88 0f       	add	r24, r24
    16c0:	91 1d       	adc	r25, r1
    16c2:	96 95       	lsr	r25
    16c4:	87 95       	ror	r24
    16c6:	97 f9       	bld	r25, 7
    16c8:	08 95       	ret

000016ca <__fp_norm2>:
    16ca:	91 50       	subi	r25, 0x01	; 1
    16cc:	50 40       	sbci	r21, 0x00	; 0
    16ce:	66 0f       	add	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	88 1f       	adc	r24, r24
    16d4:	d2 f7       	brpl	.-12     	; 0x16ca <__fp_norm2>
    16d6:	08 95       	ret

000016d8 <__itoa_ncheck>:
    16d8:	bb 27       	eor	r27, r27
    16da:	4a 30       	cpi	r20, 0x0A	; 10
    16dc:	31 f4       	brne	.+12     	; 0x16ea <__itoa_ncheck+0x12>
    16de:	99 23       	and	r25, r25
    16e0:	22 f4       	brpl	.+8      	; 0x16ea <__itoa_ncheck+0x12>
    16e2:	bd e2       	ldi	r27, 0x2D	; 45
    16e4:	90 95       	com	r25
    16e6:	81 95       	neg	r24
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__utoa_common>

000016ee <__utoa_ncheck>:
    16ee:	bb 27       	eor	r27, r27

000016f0 <__utoa_common>:
    16f0:	fb 01       	movw	r30, r22
    16f2:	55 27       	eor	r21, r21
    16f4:	aa 27       	eor	r26, r26
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	aa 1f       	adc	r26, r26
    16fc:	a4 17       	cp	r26, r20
    16fe:	10 f0       	brcs	.+4      	; 0x1704 <__utoa_common+0x14>
    1700:	a4 1b       	sub	r26, r20
    1702:	83 95       	inc	r24
    1704:	50 51       	subi	r21, 0x10	; 16
    1706:	b9 f7       	brne	.-18     	; 0x16f6 <__utoa_common+0x6>
    1708:	a0 5d       	subi	r26, 0xD0	; 208
    170a:	aa 33       	cpi	r26, 0x3A	; 58
    170c:	08 f0       	brcs	.+2      	; 0x1710 <__utoa_common+0x20>
    170e:	a9 5d       	subi	r26, 0xD9	; 217
    1710:	a1 93       	st	Z+, r26
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	79 f7       	brne	.-34     	; 0x16f4 <__utoa_common+0x4>
    1716:	b1 11       	cpse	r27, r1
    1718:	b1 93       	st	Z+, r27
    171a:	11 92       	st	Z+, r1
    171c:	cb 01       	movw	r24, r22
    171e:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <strrev>

00001722 <strrev>:
    1722:	dc 01       	movw	r26, r24
    1724:	fc 01       	movw	r30, r24
    1726:	67 2f       	mov	r22, r23
    1728:	71 91       	ld	r23, Z+
    172a:	77 23       	and	r23, r23
    172c:	e1 f7       	brne	.-8      	; 0x1726 <strrev+0x4>
    172e:	32 97       	sbiw	r30, 0x02	; 2
    1730:	04 c0       	rjmp	.+8      	; 0x173a <strrev+0x18>
    1732:	7c 91       	ld	r23, X
    1734:	6d 93       	st	X+, r22
    1736:	70 83       	st	Z, r23
    1738:	62 91       	ld	r22, -Z
    173a:	ae 17       	cp	r26, r30
    173c:	bf 07       	cpc	r27, r31
    173e:	c8 f3       	brcs	.-14     	; 0x1732 <strrev+0x10>
    1740:	08 95       	ret

00001742 <_exit>:
    1742:	f8 94       	cli

00001744 <__stop_program>:
    1744:	ff cf       	rjmp	.-2      	; 0x1744 <__stop_program>
